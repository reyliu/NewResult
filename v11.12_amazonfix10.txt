liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.12_pair/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [14.4 s]. #user=28881, #item=30133, #train_user=577620, #cv=144405, #test=1277634
Time: [100.6], Init: 
Init_NDCG1: [ 0.72173617  0.74884326  0.78504793  0.83356229  0.89843199]
Init_NDCG2: [ 0.72219941  0.74824955  0.78516468  0.83363058  0.89842495]
Init_NDCG3: [ 0.72534975  0.75028543  0.78683976  0.83561815  0.89935663]
Init_NDCG4: [ 0.72390376  0.74882047  0.78547411  0.83492409  0.89889433]
Iteration 0 [35.9 s]: ranku_loss = 1.574056 [97.71 s],
NDCG1: [ 0.75337536  0.77303684  0.8047756   0.84900336  0.90837568]
NDCG2: [ 0.73146151  0.75693435  0.79267085  0.83984679  0.90204573]
NDCG3: [ 0.72045047  0.74613234  0.78395625  0.83308806  0.89778172]
NDCG4: [ 0.72354862  0.74712605  0.78278385  0.83282848  0.89816214]
Iteration 1 [23.2 s]: ranku_loss = 0.783237 [99.61 s],
NDCG1: [ 0.76744073  0.78436213  0.81418116  0.85651189  0.91296251]
NDCG2: [ 0.72465     0.75154311  0.78876286  0.83653826  0.90010206]
NDCG3: [ 0.71501687  0.74282412  0.78029147  0.83016978  0.89605896]
NDCG4: [ 0.71799624  0.74185555  0.78012602  0.83012264  0.89642882]
Iteration 2 [26.4 s]: ranku_loss = 0.686717 [100.66 s],
NDCG1: [ 0.78327108  0.79786423  0.82585643  0.86583494  0.91848528]
NDCG2: [ 0.77048703  0.78849335  0.81920029  0.86154235  0.91504353]
NDCG3: [ 0.69918201  0.72992142  0.76983979  0.82199168  0.89092273]
NDCG4: [ 0.7128149   0.73853013  0.77713893  0.82760247  0.89489621]
Iteration 3 [26.5 s]: ranku_loss = 0.662860 [100.74 s],
NDCG1: [ 0.79263193  0.8042084   0.83128135  0.87036765  0.92132746]
NDCG2: [ 0.79136265  0.80469376  0.83130759  0.87076023  0.92136427]
NDCG3: [ 0.67955614  0.7134253   0.75714727  0.81224843  0.88461024]
NDCG4: [ 0.69556528  0.72473247  0.76665689  0.81957061  0.88946664]
Iteration 4 [26.1 s]: ranku_loss = 0.633768 [100.53 s],
NDCG1: [ 0.79364206  0.80577085  0.83283781  0.87158154  0.92195579]
NDCG2: [ 0.79186986  0.80552004  0.8329941   0.8714358   0.92179751]
NDCG3: [ 0.66783503  0.70441183  0.74969379  0.806059    0.88089323]
NDCG4: [ 0.67097326  0.70713752  0.75159322  0.80819037  0.88197675]
Iteration 5 [25.4 s]: ranku_loss = 0.621843 [101.48 s],
NDCG1: [ 0.7923064   0.80517253  0.83323784  0.87123252  0.92177545]
NDCG2: [ 0.79104523  0.8051747   0.83299301  0.87126296  0.92161742]
NDCG3: [ 0.66562672  0.70324784  0.74849754  0.80493927  0.88026635]
NDCG4: [ 0.6611187   0.69951824  0.74505382  0.8031926   0.87881043]
End. Best Model is model1.
Test_NDCG:
[ 0.7962544   0.7909014   0.78725262  0.7860455   0.78658006  0.78840678
  0.79218936  0.79688454  0.80267178  0.8097038 ]

liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.12_pair/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [14.3 s]. #user=28881, #item=30133, #train_user=577620, #cv=144405, #test=1277634
Time: [103.0], Init: 
Init_NDCG1: [ 0.72253094  0.7483647   0.78371595  0.83330971  0.89833917]
Init_NDCG2: [ 0.72538117  0.75083585  0.78618972  0.83504491  0.89926632]
Init_NDCG3: [ 0.72666505  0.74980407  0.78659934  0.83541341  0.89947325]
Init_NDCG4: [ 0.72640286  0.7511      0.7877252   0.83582482  0.89966798]
Iteration 0 [28.7 s]: ranku_loss = 1.685522 [101.29 s],
NDCG1: [ 0.7520059   0.77226945  0.80477695  0.84853595  0.90808741]
NDCG2: [ 0.72491044  0.75168526  0.7878957   0.83638883  0.89970356]
NDCG3: [ 0.7192802   0.74530598  0.78277797  0.83237788  0.8974615 ]
NDCG4: [ 0.72219403  0.7469327   0.78403803  0.83273367  0.8980021 ]
Iteration 1 [27.1 s]: ranku_loss = 0.815252 [101.23 s],
NDCG1: [ 0.76586379  0.78310812  0.81397866  0.85645971  0.91262674]
NDCG2: [ 0.70338433  0.73286331  0.77265577  0.82450331  0.89248464]
NDCG3: [ 0.72253204  0.74834975  0.78494256  0.83399535  0.89855735]
NDCG4: [ 0.71517466  0.74128117  0.77864333  0.82852335  0.8956464 ]
Iteration 2 [26.9 s]: ranku_loss = 0.692012 [101.92 s],
NDCG1: [ 0.77788973  0.79301277  0.82187877  0.863326    0.91665367]
NDCG2: [ 0.71200499  0.73968347  0.77852891  0.82956623  0.89531386]
NDCG3: [ 0.72416165  0.74913178  0.78567691  0.83463177  0.89898658]
NDCG4: [ 0.70675475  0.73482413  0.7734011   0.82437628  0.89300372]
Iteration 3 [27.1 s]: ranku_loss = 0.678727 [102.84 s],
NDCG1: [ 0.78705134  0.80137359  0.82878678  0.86872937  0.91996851]
NDCG2: [ 0.78455297  0.79894899  0.82740442  0.86749029  0.91916907]
NDCG3: [ 0.71864406  0.74493041  0.78321927  0.83240987  0.89745684]
NDCG4: [ 0.68965274  0.72155475  0.76282725  0.81629112  0.88766731]
Iteration 4 [28.3 s]: ranku_loss = 0.656411 [115.43 s],
NDCG1: [ 0.78918081  0.80385949  0.83120216  0.87019843  0.92094696]
NDCG2: [ 0.79116345  0.80506493  0.83165493  0.87079506  0.92143165]
NDCG3: [ 0.71016358  0.73806413  0.77666897  0.82767879  0.89451709]
NDCG4: [ 0.67070194  0.70723958  0.75101791  0.80701285  0.88179627]
Iteration 5 [23.0 s]: ranku_loss = 0.629832 [91.98 s],
NDCG1: [ 0.7913805   0.80526361  0.83235319  0.87078894  0.92150292]
NDCG2: [ 0.79218009  0.80586461  0.8325151   0.87108462  0.92175516]
NDCG3: [ 0.68903366  0.72042194  0.76274873  0.81680811  0.88756041]
NDCG4: [ 0.66380742  0.69943075  0.74479515  0.80282131  0.87904394]
Iteration 6 [22.2 s]: ranku_loss = 0.616951 [95.33 s],
NDCG1: [ 0.79198977  0.8059266   0.83300879  0.87110879  0.92175937]
NDCG2: [ 0.79159265  0.80576996  0.83270418  0.87101937  0.92167249]
NDCG3: [ 0.67033436  0.70592419  0.75032584  0.8064904   0.88143849]
NDCG4: [ 0.66548165  0.70151552  0.74653157  0.80358304  0.87968252]
Iteration 7 [27.5 s]: ranku_loss = 0.598369 [101.81 s],
NDCG1: [ 0.79222033  0.80547338  0.83288493  0.87100704  0.92172048]
NDCG2: [ 0.79108129  0.80554095  0.83275779  0.87098325  0.92159158]
NDCG3: [ 0.66576056  0.70165623  0.7465768   0.80381666  0.87980111]
NDCG4: [ 0.66536327  0.70159764  0.74584829  0.80321607  0.87962874]
End. Best Model is model1.
Test_NDCG:
[ 0.80321475  0.79537319  0.79123076  0.7890965   0.78941522  0.79140204
  0.79459025  0.79927276  0.80490206  0.81184413]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.12_pair/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [13.8 s]. #user=28881, #item=30133, #train_user=577620, #cv=144405, #test=1277634
Time: [102.2], Init: 
Init_NDCG1: [ 0.72556529  0.75027924  0.78578275  0.8341867   0.89922017]
Init_NDCG2: [ 0.72565468  0.75033006  0.78627974  0.83483033  0.89925864]
Init_NDCG3: [ 0.72466542  0.75049508  0.78682378  0.83483292  0.89925842]
Init_NDCG4: [ 0.72473071  0.75086565  0.78671479  0.83522562  0.89940672]
Iteration 0 [29.2 s]: ranku_loss = 1.483274 [113.34 s],
NDCG1: [ 0.74584131  0.76705242  0.80081732  0.84609503  0.90612952]
NDCG2: [ 0.72893722  0.75238654  0.78883583  0.83675215  0.90051945]
NDCG3: [ 0.71418534  0.74098965  0.77826218  0.82857124  0.89550267]
NDCG4: [ 0.72380462  0.74783573  0.78383671  0.83258589  0.89837861]
Iteration 1 [27.5 s]: ranku_loss = 0.749260 [104.22 s],
NDCG1: [ 0.76045023  0.77832728  0.80996327  0.85320561  0.91072615]
NDCG2: [ 0.73222759  0.75627348  0.79170677  0.83949985  0.90186608]
NDCG3: [ 0.71131776  0.73779894  0.77586035  0.82658388  0.8943526 ]
NDCG4: [ 0.72233236  0.74623029  0.7823823   0.83136151  0.89774175]
Iteration 2 [22.5 s]: ranku_loss = 0.685758 [92.35 s],
NDCG1: [ 0.78324733  0.79735032  0.82600734  0.86604606  0.9186074 ]
NDCG2: [ 0.77509219  0.7918804   0.82172482  0.86265852  0.91629017]
NDCG3: [ 0.69789447  0.72615237  0.76668404  0.81925694  0.88980782]
NDCG4: [ 0.71555999  0.74063231  0.77788194  0.82778942  0.89552891]
Iteration 3 [22.7 s]: ranku_loss = 0.660271 [91.55 s],
NDCG1: [ 0.7891183   0.80357317  0.83099195  0.87005559  0.92091297]
NDCG2: [ 0.78910273  0.8027809   0.8311882   0.87022567  0.92084674]
NDCG3: [ 0.6797354   0.71201417  0.75437526  0.80947981  0.88387132]
NDCG4: [ 0.71048756  0.73708288  0.7746619   0.82607427  0.89401599]
Iteration 4 [22.4 s]: ranku_loss = 0.631528 [91.52 s],
NDCG1: [ 0.7899179   0.8048572   0.83250255  0.8714006   0.9214144 ]
NDCG2: [ 0.78882869  0.80474752  0.83259463  0.87129943  0.92130014]
NDCG3: [ 0.67733034  0.71055077  0.75378096  0.80916016  0.88331971]
NDCG4: [ 0.6975328   0.7281797   0.76816501  0.82065775  0.890301  ]
Iteration 5 [22.5 s]: ranku_loss = 0.620467 [92.84 s],
NDCG1: [ 0.79006031  0.80569308  0.83313884  0.87144511  0.9216115 ]
NDCG2: [ 0.788093    0.80469402  0.83267811  0.87127077  0.92121442]
NDCG3: [ 0.67494683  0.70991475  0.75282946  0.80862111  0.88282779]
NDCG4: [ 0.68557061  0.71868985  0.76153719  0.81540839  0.8866195 ]
Iteration 6 [25.7 s]: ranku_loss = 0.610199 [97.95 s],
NDCG1: [ 0.78944196  0.80462345  0.83290953  0.8711217   0.92137083]
NDCG2: [ 0.78866974  0.80446333  0.83251213  0.8710467   0.92120509]
NDCG3: [ 0.6767045   0.71108028  0.75401252  0.80951731  0.8833544 ]
NDCG4: [ 0.679431    0.71325541  0.75654871  0.81185098  0.8844502 ]
End. Best Model is model1.
Test_NDCG:
[ 0.78929082  0.78378375  0.78126884  0.78081774  0.78210566  0.78457427
  0.78813548  0.79347033  0.79955541  0.80684913]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.12_pair/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [14.6 s]. #user=28881, #item=30133, #train_user=577620, #cv=144405, #test=1277634
Time: [103.1], Init: 
Init_NDCG1: [ 0.7215294   0.74718885  0.78423977  0.83384677  0.89821894]
Init_NDCG2: [ 0.72383713  0.74882208  0.78510903  0.83382617  0.89871314]
Init_NDCG3: [ 0.72579414  0.74879819  0.78621283  0.83485527  0.89918471]
Init_NDCG4: [ 0.72618953  0.74974185  0.78620415  0.83478026  0.89930338]
Iteration 0 [29.5 s]: ranku_loss = 1.927993 [101.43 s],
NDCG1: [ 0.75015607  0.7690492   0.80122058  0.84688691  0.90694855]
NDCG2: [ 0.73341286  0.75735511  0.79156954  0.83929542  0.90209347]
NDCG3: [ 0.72714899  0.7508365   0.78717002  0.83609086  0.89981984]
NDCG4: [ 0.73341856  0.75553448  0.79157384  0.83931326  0.90183769]
Iteration 1 [28.1 s]: ranku_loss = 1.045421 [105.41 s],
NDCG1: [ 0.75185429  0.77114088  0.80343309  0.84755891  0.90768072]
NDCG2: [ 0.73034883  0.75398139  0.78998719  0.83804704  0.9010048 ]
NDCG3: [ 0.72316144  0.74866982  0.78605851  0.83459514  0.89880713]
NDCG4: [ 0.74007278  0.76210399  0.79682885  0.8438181   0.90429874]
Iteration 2 [24.2 s]: ranku_loss = 0.743361 [109.59 s],
NDCG1: [ 0.75346508  0.77106386  0.80367749  0.84830355  0.90795517]
NDCG2: [ 0.73477617  0.75883345  0.7949551   0.84207708  0.90304028]
NDCG3: [ 0.71151834  0.73999943  0.77918039  0.82928776  0.8952726 ]
NDCG4: [ 0.74995353  0.77019778  0.80486061  0.85033213  0.90789664]
Iteration 3 [22.4 s]: ranku_loss = 0.691347 [96.34 s],
NDCG1: [ 0.76547235  0.78233677  0.81284526  0.85523343  0.91227966]
NDCG2: [ 0.75298533  0.77576049  0.80997627  0.85330794  0.90979112]
NDCG3: [ 0.69827321  0.72976603  0.7706948   0.82299278  0.8910719 ]
NDCG4: [ 0.76347807  0.78295068  0.81593607  0.85796027  0.91282523]
Iteration 4 [27.1 s]: ranku_loss = 0.679782 [99.63 s],
NDCG1: [ 0.78362451  0.79792281  0.8263533   0.86660363  0.91876353]
NDCG2: [ 0.77881357  0.79572515  0.8249881   0.86517396  0.91774251]
NDCG3: [ 0.68781489  0.72093109  0.76338701  0.81705624  0.88751087]
NDCG4: [ 0.77737921  0.79347134  0.82424546  0.86478954  0.91717606]
Iteration 5 [36.4 s]: ranku_loss = 0.657831 [121.84 s],
NDCG1: [ 0.78921934  0.8033801   0.83163838  0.87041919  0.92100802]
NDCG2: [ 0.78674513  0.80251154  0.83059424  0.86957185  0.92046483]
NDCG3: [ 0.68790454  0.72017867  0.76201372  0.81618862  0.8871761 ]
NDCG4: [ 0.78345923  0.79918052  0.8288885   0.86816071  0.91936086]
Iteration 6 [23.3 s]: ranku_loss = 0.633090 [102.30 s],
NDCG1: [ 0.79063952  0.80527342  0.83266101  0.8713665   0.92159676]
NDCG2: [ 0.78797722  0.80371687  0.83183297  0.8705132   0.92099386]
NDCG3: [ 0.71145048  0.73953188  0.77852074  0.82901894  0.89509412]
NDCG4: [ 0.78429697  0.80023422  0.82925244  0.86844648  0.91968335]
Iteration 7 [23.0 s]: ranku_loss = 0.618338 [101.39 s],
NDCG1: [ 0.79039441  0.80491841  0.83268972  0.87125432  0.92153504]
NDCG2: [ 0.78809941  0.80368423  0.83186934  0.87078491  0.92104618]
NDCG3: [ 0.74589218  0.76723201  0.80037916  0.84623981  0.90621903]
NDCG4: [ 0.77469931  0.79135537  0.82016184  0.86170744  0.91588115]
End. Best Model is model1.
Test_NDCG:
[ 0.7843332   0.7804969   0.77889296  0.77888441  0.78037683  0.78316874
  0.78719269  0.79247462  0.79886392  0.80593039]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.12_pair/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [14.7 s]. #user=28881, #item=30133, #train_user=577620, #cv=144405, #test=1277634
Time: [102.9], Init: 
Init_NDCG1: [ 0.72354785  0.7484538   0.7856535   0.8345257   0.89885996]
Init_NDCG2: [ 0.7283875   0.75228987  0.788699    0.83581462  0.90010162]
Init_NDCG3: [ 0.72467893  0.74796139  0.78471959  0.83338274  0.89859944]
Init_NDCG4: [ 0.72534824  0.75044799  0.78614484  0.83497813  0.89933911]
Iteration 0 [27.0 s]: ranku_loss = 1.324755 [99.64 s],
NDCG1: [ 0.75299003  0.77433941  0.80551289  0.84964853  0.90863611]
NDCG2: [ 0.71368995  0.74058121  0.77884098  0.82858609  0.89552171]
NDCG3: [ 0.72280211  0.74753497  0.78318613  0.83237284  0.89810221]
NDCG4: [ 0.72278828  0.74844197  0.78515637  0.83366778  0.89851662]
Iteration 1 [26.6 s]: ranku_loss = 0.716267 [100.05 s],
NDCG1: [ 0.77083813  0.7871155   0.81773211  0.85921215  0.91433974]
NDCG2: [ 0.71762802  0.7456679   0.78287897  0.83280215  0.89747511]
NDCG3: [ 0.71160498  0.73815283  0.77639741  0.82690458  0.8945042 ]
NDCG4: [ 0.73178571  0.75499478  0.79051184  0.83763003  0.90125234]
Iteration 2 [25.1 s]: ranku_loss = 0.678189 [98.75 s],
NDCG1: [ 0.78571162  0.80049782  0.82824178  0.86780446  0.91955997]
NDCG2: [ 0.78452378  0.80031478  0.82923071  0.86786433  0.91959959]
NDCG3: [ 0.69409698  0.72549286  0.76638635  0.81920792  0.88934199]
NDCG4: [ 0.73968439  0.76134192  0.79542372  0.84168007  0.90376895]
Iteration 3 [31.7 s]: ranku_loss = 0.645333 [97.82 s],
NDCG1: [ 0.79113278  0.80495099  0.83188746  0.87058528  0.92137642]
NDCG2: [ 0.78990517  0.80471577  0.83228589  0.87079717  0.92131306]
NDCG3: [ 0.68626544  0.71940708  0.76089602  0.81524056  0.88678776]
NDCG4: [ 0.6995099   0.72951907  0.7694873   0.82212197  0.89097485]
Iteration 4 [34.0 s]: ranku_loss = 0.624749 [96.84 s],
NDCG1: [ 0.79047002  0.80539732  0.83245676  0.87098185  0.92146359]
NDCG2: [ 0.78822344  0.80420585  0.83215542  0.87072536  0.92104792]
NDCG3: [ 0.67789791  0.71268185  0.75526049  0.81119331  0.88409667]
NDCG4: [ 0.67683759  0.7106996   0.75468608  0.81058838  0.88360804]
Iteration 5 [40.4 s]: ranku_loss = 0.613747 [97.52 s],
NDCG1: [ 0.7900708   0.80485352  0.83304733  0.87127531  0.92147526]
NDCG2: [ 0.78776488  0.80389659  0.83261049  0.87074921  0.92104564]
NDCG3: [ 0.6695481   0.70515032  0.75018833  0.8069341   0.88136059]
NDCG4: [ 0.66814071  0.70313885  0.74900418  0.80565973  0.88068637]
End. Best Model is model1.
Test_NDCG:
[ 0.80131656  0.79329885  0.78927955  0.78735364  0.78758105  0.7896576
  0.79293524  0.79785174  0.80363706  0.81091354]

