liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [14.1 s]. #user=13679, #item=12922, #train_user=273580, #train_item=1015066, #cv=68395, #test=503353
Time: [37.3], Init: 
Init_NDCG1: [ 0.62430784  0.66191083  0.71522881  0.77906671  0.858621  ]
Init_NDCG2: [ 0.62323824  0.6617384   0.71529606  0.77940879  0.85847313]
Init_NDCG3: [ 0.6267196   0.66557718  0.71809691  0.78158532  0.85993084]
Init_NDCG4: [ 0.6200966   0.65924863  0.71248822  0.77745338  0.85738104]
Iteration 0 [57.6 s]: ranku_loss = 1.160961 [35.54 s],
NDCG1: [ 0.67025945  0.70013337  0.74581652  0.80283635  0.87486074]
NDCG2: [ 0.59153508  0.63063761  0.68695771  0.75608401  0.84524858]
NDCG3: [ 0.66942962  0.69904245  0.74493635  0.80210369  0.8744342 ]
NDCG4: [ 0.58702711  0.62790338  0.68340685  0.75374459  0.84382225]
Iteration 1 [37.0 s]: ranku_loss = 0.700803 [35.60 s],
NDCG1: [ 0.69606621  0.7214658   0.76292586  0.81618063  0.8837617 ]
NDCG2: [ 0.59524898  0.63392346  0.68999811  0.75911297  0.84673964]
NDCG3: [ 0.69030942  0.71723458  0.75933518  0.81304327  0.88180279]
NDCG4: [ 0.57101103  0.61383283  0.67051472  0.74303221  0.83781044]
Iteration 2 [36.6 s]: ranku_loss = 0.681277 [36.02 s],
NDCG1: [ 0.7254687   0.74647866  0.78594328  0.83444282  0.89468801]
NDCG2: [ 0.72963134  0.75281573  0.79220886  0.84043827  0.89720994]
NDCG3: [ 0.72330597  0.74409156  0.78233063  0.8319228   0.89350296]
NDCG4: [ 0.72204021  0.74489333  0.78521801  0.833947    0.89395389]
Iteration 3 [66.9 s]: ranku_loss = 0.625065 [35.46 s],
NDCG1: [ 0.73304608  0.75690658  0.79425954  0.84117933  0.89845225]
NDCG2: [ 0.73030646  0.7545572   0.79369295  0.84145181  0.89774442]
NDCG3: [ 0.73211528  0.75686427  0.79418573  0.84072092  0.89830545]
NDCG4: [ 0.73313556  0.75460638  0.79137244  0.83799194  0.89752923]
Iteration 4 [37.3 s]: ranku_loss = 0.599674 [35.35 s],
NDCG1: [ 0.73214475  0.75508395  0.79433015  0.8411942   0.89811411]
NDCG2: [ 0.72649279  0.75268829  0.79276251  0.84052699  0.896818  ]
NDCG3: [ 0.73216707  0.75474775  0.7938336   0.84070433  0.89799088]
NDCG4: [ 0.72928371  0.75084849  0.78872699  0.83530578  0.89593979]
End. Best Model is model1.
Test_NDCG:
[ 0.72690232  0.71704672  0.713063    0.71256767  0.71551619  0.72037609
  0.72677142  0.73510707  0.74452825  0.7550945 ]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [13.6 s]. #user=13679, #item=12922, #train_user=273580, #train_item=1015066, #cv=68395, #test=503353
Time: [35.8], Init: 
Init_NDCG1: [ 0.61935845  0.66031923  0.71409099  0.77858165  0.8577456 ]
Init_NDCG2: [ 0.61810631  0.65867358  0.71326423  0.77747416  0.85705655]
Init_NDCG3: [ 0.61803282  0.6573952   0.71254102  0.77837526  0.85706828]
Init_NDCG4: [ 0.62568966  0.66522197  0.71667699  0.78131454  0.85962233]
Iteration 0 [43.6 s]: ranku_loss = 1.489763 [36.95 s],
NDCG1: [ 0.69672584  0.72349853  0.76604349  0.81970007  0.88479253]
NDCG2: [ 0.57038604  0.61604009  0.67324497  0.74609227  0.83854701]
NDCG3: [ 0.69637871  0.72348667  0.76604736  0.81993962  0.88482328]
NDCG4: [ 0.56939208  0.61570284  0.67299575  0.74581484  0.83833193]
Iteration 1 [44.4 s]: ranku_loss = 0.676609 [41.22 s],
NDCG1: [ 0.72440193  0.75009154  0.78992879  0.83809855  0.89586092]
NDCG2: [ 0.72823922  0.75407869  0.79193488  0.84044753  0.89715534]
NDCG3: [ 0.7239589   0.75013453  0.78997337  0.83813182  0.8958228 ]
NDCG4: [ 0.72791046  0.75401203  0.79192241  0.84043246  0.89710415]
Iteration 2 [57.6 s]: ranku_loss = 0.620486 [36.76 s],
NDCG1: [ 0.73322948  0.75714254  0.79515255  0.84163994  0.89869472]
NDCG2: [ 0.73051111  0.7537549   0.79294646  0.84131602  0.89749925]
NDCG3: [ 0.73347613  0.75729806  0.79512876  0.84172031  0.89875804]
NDCG4: [ 0.73055859  0.7536346   0.79291733  0.84131283  0.89748121]
Iteration 3 [37.5 s]: ranku_loss = 0.603450 [38.22 s],
NDCG1: [ 0.73340377  0.75667872  0.79515903  0.84192028  0.89866221]
NDCG2: [ 0.72506681  0.75085653  0.79248437  0.84009608  0.89629897]
NDCG3: [ 0.73296765  0.75647588  0.79504849  0.84192742  0.89856598]
NDCG4: [ 0.72476528  0.75080652  0.79240574  0.84001338  0.89624594]
End. Best Model is model1.
Test_NDCG:
[ 0.72837542  0.71803875  0.71509622  0.71469363  0.71704383  0.72147884
  0.72787777  0.73610117  0.74536917  0.75590429]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [15.6 s]. #user=13679, #item=12922, #train_user=273580, #train_item=1015066, #cv=68395, #test=503353
Time: [41.3], Init: 
Init_NDCG1: [ 0.62469912  0.66232766  0.71466137  0.77914133  0.85866829]
Init_NDCG2: [ 0.6198226   0.66070345  0.7134914   0.77910669  0.857907  ]
Init_NDCG3: [ 0.61810357  0.65687044  0.71092864  0.77576398  0.85637854]
Init_NDCG4: [ 0.62528468  0.6627382   0.71511452  0.77910342  0.8589795 ]
Iteration 0 [44.9 s]: ranku_loss = 1.349473 [37.54 s],
NDCG1: [ 0.66533625  0.69887537  0.74567216  0.80265592  0.87411199]
NDCG2: [ 0.58367116  0.62478064  0.68218053  0.75368643  0.84289813]
NDCG3: [ 0.66581203  0.69837452  0.7455015   0.80254976  0.87410347]
NDCG4: [ 0.58259604  0.62440622  0.68187077  0.75321914  0.84263839]
Iteration 1 [48.3 s]: ranku_loss = 0.703436 [41.93 s],
NDCG1: [ 0.68555997  0.71622134  0.75989148  0.81374237  0.88131504]
NDCG2: [ 0.56703809  0.61024712  0.66928076  0.74382304  0.83682228]
NDCG3: [ 0.68514564  0.71514214  0.75906393  0.81286561  0.88094175]
NDCG4: [ 0.56452741  0.60871421  0.66818384  0.74263467  0.83613171]
Iteration 2 [58.3 s]: ranku_loss = 0.694354 [37.05 s],
NDCG1: [ 0.70642288  0.73348001  0.77510559  0.82586595  0.88880719]
NDCG2: [ 0.54473042  0.59211215  0.6547893   0.7315426   0.82924382]
NDCG3: [ 0.70505834  0.7327072   0.77462185  0.82512413  0.88846136]
NDCG4: [ 0.54288427  0.59017919  0.65318205  0.73018053  0.82848475]
Iteration 3 [38.4 s]: ranku_loss = 0.683210 [36.89 s],
NDCG1: [ 0.72354736  0.74722856  0.78725891  0.83579089  0.89485468]
NDCG2: [ 0.72386273  0.74885547  0.78901416  0.83709755  0.8954942 ]
NDCG3: [ 0.72318392  0.74681142  0.78698288  0.83548015  0.89473387]
NDCG4: [ 0.72109207  0.74641561  0.78685267  0.83518716  0.89445202]
Iteration 4 [71.9 s]: ranku_loss = 0.641975 [37.72 s],
NDCG1: [ 0.73370813  0.75549847  0.79316232  0.84089953  0.89818549]
NDCG2: [ 0.73145772  0.75367181  0.79048191  0.83802733  0.89703785]
NDCG3: [ 0.73401596  0.75538348  0.7933938   0.84079853  0.89822945]
NDCG4: [ 0.73193345  0.75292833  0.79025502  0.83806178  0.89699642]
Iteration 5 [37.7 s]: ranku_loss = 0.607487 [35.73 s],
NDCG1: [ 0.73229684  0.75541291  0.79426118  0.84085538  0.89804933]
NDCG2: [ 0.72894233  0.75380775  0.79314664  0.84020812  0.89727525]
NDCG3: [ 0.73233206  0.75519623  0.79406366  0.84083095  0.89799285]
NDCG4: [ 0.72919765  0.75335333  0.79259948  0.83961636  0.89709944]
End. Best Model is model1.
Test_NDCG:
[ 0.72818204  0.71759842  0.71487737  0.71420139  0.71649379  0.72151329
  0.72756224  0.73537507  0.74469335  0.75546986]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [6.1 s]. #user=13679, #item=12922, #train_user=273580, #cv=68395, #test=503353
Time: [37.3], Init: 
Init_NDCG1: [ 0.62693754  0.66700671  0.71751315  0.78126923  0.8601171 ]
Init_NDCG2: [ 0.6267748   0.66460889  0.71738563  0.78119308  0.85974371]
Init_NDCG3: [ 0.61735725  0.6579153   0.71076657  0.77650035  0.85648806]
Init_NDCG4: [ 0.62296868  0.65956119  0.71371631  0.77814229  0.8579359 ]
Iteration 0 [75.5 s]: ranku_loss = 1.272855 [35.34 s],
NDCG1: [ 0.66297965  0.69571722  0.7422617   0.79974446  0.87274483]
NDCG2: [ 0.59140948  0.63071     0.68637967  0.75683471  0.84531689]
NDCG3: [ 0.66320253  0.69505961  0.74202421  0.79957289  0.87264693]
NDCG4: [ 0.59094853  0.63022708  0.68625245  0.75656566  0.84516163]
Iteration 1 [37.3 s]: ranku_loss = 0.705628 [34.88 s],
NDCG1: [ 0.68218093  0.71043391  0.754983    0.80941872  0.87918748]
NDCG2: [ 0.58021073  0.62080327  0.67828434  0.74999696  0.84127343]
NDCG3: [ 0.67941827  0.707953    0.75285074  0.80784439  0.87815498]
NDCG4: [ 0.58084633  0.62068106  0.67825397  0.74996608  0.84132166]
Iteration 2 [30.0 s]: ranku_loss = 0.696594 [34.44 s],
NDCG1: [ 0.70943385  0.73314376  0.77329844  0.8242882   0.88879173]
NDCG2: [ 0.59317491  0.63546583  0.69310079  0.76356279  0.84757306]
NDCG3: [ 0.707254    0.73104994  0.77192131  0.82287314  0.8879568 ]
NDCG4: [ 0.5903181   0.63302032  0.69095588  0.76196257  0.8465318 ]
Iteration 3 [30.0 s]: ranku_loss = 0.662969 [34.64 s],
NDCG1: [ 0.72966354  0.75391146  0.79283702  0.83981541  0.89742627]
NDCG2: [ 0.7021382   0.73954701  0.78474546  0.83296166  0.89065954]
NDCG3: [ 0.72932068  0.75385049  0.79263503  0.83980015  0.89736076]
NDCG4: [ 0.70184421  0.7391035   0.78447555  0.83286278  0.89054637]
Iteration 4 [35.6 s]: ranku_loss = 0.612728 [37.70 s],
NDCG1: [ 0.73137089  0.75527711  0.79368513  0.84085826  0.89787647]
NDCG2: [ 0.69917147  0.739349    0.78414552  0.833973    0.89036968]
NDCG3: [ 0.73129215  0.75553293  0.79358137  0.84105242  0.89791736]
NDCG4: [ 0.69768112  0.73875692  0.78400567  0.83371276  0.89013084]
Iteration 5 [36.5 s]: ranku_loss = 0.600461 [37.99 s],
NDCG1: [ 0.733696    0.75616995  0.7949777   0.84175345  0.89849937]
NDCG2: [ 0.71107378  0.74633478  0.78932642  0.83721518  0.89350751]
NDCG3: [ 0.73331599  0.7560614   0.79485013  0.84154016  0.89840616]
NDCG4: [ 0.70569223  0.74303901  0.78753769  0.83561507  0.89212153]
Iteration 6 [36.0 s]: ranku_loss = 0.594596 [37.79 s],
NDCG1: [ 0.73158807  0.75495766  0.79426853  0.84129732  0.89797761]
NDCG2: [ 0.72087107  0.75069154  0.7915601   0.83929135  0.8956511 ]
NDCG3: [ 0.73091205  0.75477508  0.79426635  0.84120183  0.89788934]
NDCG4: [ 0.71750169  0.7489775   0.79081923  0.83842085  0.89489405]
End. Best Model is model1.
Test_NDCG:
[ 0.72621246  0.71607783  0.71157983  0.71144583  0.71397641  0.71856533
  0.72497856  0.73318204  0.74278962  0.75337322]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [6.2 s]. #user=13679, #item=12922, #train_user=273580, #cv=68395, #test=503353
Time: [38.5], Init: 
Init_NDCG1: [ 0.61957784  0.6580099   0.71233004  0.77653597  0.85691581]
Init_NDCG2: [ 0.62201888  0.66024336  0.71168706  0.77676783  0.85761931]
Init_NDCG3: [ 0.62055028  0.66241246  0.71611654  0.77993458  0.85862913]
Init_NDCG4: [ 0.61995196  0.66055608  0.71438281  0.77897111  0.85775687]
Iteration 0 [44.3 s]: ranku_loss = 1.373321 [35.86 s],
NDCG1: [ 0.66469091  0.69610865  0.74230998  0.800949    0.87295655]
NDCG2: [ 0.58590976  0.62896388  0.68466399  0.75528075  0.84411226]
NDCG3: [ 0.66456325  0.69619168  0.74231919  0.80088846  0.87295093]
NDCG4: [ 0.58601801  0.62886919  0.68436252  0.75503094  0.84402846]
Iteration 1 [45.9 s]: ranku_loss = 0.706787 [35.26 s],
NDCG1: [ 0.68588891  0.71372203  0.75619728  0.81124886  0.88016828]
NDCG2: [ 0.57273208  0.61528202  0.67216546  0.74506295  0.83844204]
NDCG3: [ 0.68538277  0.71313677  0.75585571  0.81087887  0.87996311]
NDCG4: [ 0.57195198  0.61447228  0.67158853  0.74480422  0.83817956]
Iteration 2 [38.0 s]: ranku_loss = 0.699378 [35.63 s],
NDCG1: [ 0.70339286  0.72770915  0.76822094  0.82090509  0.88637161]
NDCG2: [ 0.55621678  0.6017363   0.66047823  0.73516144  0.83272745]
NDCG3: [ 0.70340638  0.72798344  0.76797421  0.82081519  0.88639018]
NDCG4: [ 0.5549164   0.6007073   0.66001087  0.73475526  0.83235235]
Iteration 3 [33.7 s]: ranku_loss = 0.695342 [36.38 s],
NDCG1: [ 0.7172002   0.73832081  0.77796526  0.82828422  0.89114773]
NDCG2: [ 0.54362125  0.59018578  0.65207918  0.72819196  0.82831062]
NDCG3: [ 0.71657575  0.73813311  0.77760046  0.82822725  0.89097777]
NDCG4: [ 0.54306745  0.58923445  0.65109375  0.72748055  0.82794316]
Iteration 4 [36.8 s]: ranku_loss = 0.692785 [36.93 s],
NDCG1: [ 0.7243173   0.74626674  0.78528541  0.83311231  0.89423146]
NDCG2: [ 0.5370632   0.58378974  0.64689395  0.72468583  0.8258668 ]
NDCG3: [ 0.72431614  0.74582188  0.78486639  0.83284169  0.89411879]
NDCG4: [ 0.53296723  0.58027354  0.64406398  0.72258318  0.82446428]
Iteration 5 [33.1 s]: ranku_loss = 0.689220 [34.53 s],
NDCG1: [ 0.72566993  0.74908981  0.78844943  0.83591009  0.89539665]
NDCG2: [ 0.541471    0.59073159  0.65357695  0.73042938  0.82847202]
NDCG3: [ 0.72543483  0.74855276  0.78769816  0.83556106  0.8951661 ]
NDCG4: [ 0.52591723  0.57514654  0.63995624  0.72003823  0.82233336]
Iteration 6 [30.0 s]: ranku_loss = 0.670904 [34.43 s],
NDCG1: [ 0.73118691  0.75329763  0.79161965  0.83936499  0.89728887]
NDCG2: [ 0.70149982  0.73675396  0.78012105  0.83063541  0.88939947]
NDCG3: [ 0.73018527  0.75228631  0.79133443  0.83876142  0.8969801 ]
NDCG4: [ 0.51734333  0.57039223  0.63744666  0.71781137  0.82034107]
Iteration 7 [35.4 s]: ranku_loss = 0.614223 [36.29 s],
NDCG1: [ 0.733354    0.75537263  0.79377132  0.84115566  0.89818819]
NDCG2: [ 0.72029162  0.7467928   0.78972024  0.83788538  0.89474103]
NDCG3: [ 0.73207333  0.75506316  0.79360602  0.84070144  0.89794983]
NDCG4: [ 0.51203784  0.56781805  0.63660361  0.71701575  0.81932818]
Iteration 8 [35.9 s]: ranku_loss = 0.578881 [37.54 s],
NDCG1: [ 0.73038462  0.75390149  0.79319553  0.84035911  0.89747035]
NDCG2: [ 0.71824253  0.74617105  0.78838273  0.83726688  0.89424542]
NDCG3: [ 0.73037995  0.75341808  0.79142431  0.83946861  0.89717079]
NDCG4: [ 0.5172106   0.57284049  0.63875343  0.71991206  0.82104631]
End. Best Model is model1.
Test_NDCG:
[ 0.72202866  0.71362945  0.71058702  0.71029157  0.71292472  0.71831046
  0.72441828  0.73269014  0.74218101  0.75289506]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [6.4 s]. #user=13679, #item=12922, #train_user=273580, #cv=68395, #test=503353
Time: [39.9], Init: 
Init_NDCG1: [ 0.61583034  0.6567493   0.71077831  0.77577447  0.85610464]
Init_NDCG2: [ 0.61638472  0.65594233  0.7104177   0.77568711  0.85585939]
Init_NDCG3: [ 0.62821269  0.66348946  0.71544419  0.77967735  0.85930049]
Init_NDCG4: [ 0.62213801  0.66132302  0.71498847  0.77899678  0.85836356]
Iteration 0 [78.1 s]: ranku_loss = 1.301863 [38.27 s],
NDCG1: [ 0.6697038   0.70066096  0.74687664  0.80399813  0.87509243]
NDCG2: [ 0.58173239  0.62423442  0.6818431   0.75246823  0.84246135]
NDCG3: [ 0.66963683  0.70048679  0.74687301  0.80397745  0.87504775]
NDCG4: [ 0.58099604  0.6240302   0.68084808  0.7518757   0.84221202]
Iteration 1 [69.8 s]: ranku_loss = 0.703030 [38.73 s],
NDCG1: [ 0.69792566  0.72346339  0.7651637   0.8180782   0.88464079]
NDCG2: [ 0.56477015  0.60710326  0.66598571  0.73975824  0.83544639]
NDCG3: [ 0.69761468  0.72292818  0.76514057  0.81786413  0.8845204 ]
NDCG4: [ 0.56040759  0.60414284  0.6635163   0.73763711  0.83407446]
Iteration 2 [44.4 s]: ranku_loss = 0.695070 [37.49 s],
NDCG1: [ 0.71524544  0.73904301  0.77878704  0.82857833  0.89119227]
NDCG2: [ 0.54821465  0.59271405  0.65456411  0.73051682  0.8295954 ]
NDCG3: [ 0.71502     0.73881106  0.77846541  0.82854057  0.89108098]
NDCG4: [ 0.54014438  0.58714917  0.64987138  0.72683211  0.82716666]
Iteration 3 [34.5 s]: ranku_loss = 0.683954 [36.54 s],
NDCG1: [ 0.72451297  0.74890911  0.78864332  0.8363741   0.89535847]
NDCG2: [ 0.72636338  0.75085835  0.79119744  0.83852608  0.89629252]
NDCG3: [ 0.72485224  0.74908361  0.78864232  0.83643149  0.89542801]
NDCG4: [ 0.72013365  0.74649624  0.78786923  0.83531269  0.8943567 ]
Iteration 4 [34.2 s]: ranku_loss = 0.638761 [36.37 s],
NDCG1: [ 0.733121    0.75648554  0.79455058  0.84092052  0.89838643]
NDCG2: [ 0.72840605  0.75316934  0.79143558  0.83819104  0.89674498]
NDCG3: [ 0.73327193  0.75650862  0.79452715  0.84102013  0.89842588]
NDCG4: [ 0.7314018   0.75283723  0.78966015  0.8351075   0.89656737]
Iteration 5 [39.8 s]: ranku_loss = 0.613131 [37.67 s],
NDCG1: [ 0.73247943  0.75566059  0.79409038  0.84114413  0.89814631]
NDCG2: [ 0.72917842  0.75205524  0.79262106  0.84011917  0.8969876 ]
NDCG3: [ 0.73285015  0.75583727  0.79427328  0.84124925  0.89824931]
NDCG4: [ 0.73150124  0.75189151  0.78804149  0.834092    0.89609436]
End. Best Model is model3.
Test_NDCG:
[ 0.72622346  0.71654426  0.71369436  0.71329115  0.71598104  0.72050146
  0.72660656  0.73478938  0.74431677  0.75487709]
Test_NDCG By model1:
[ 0.72593576  0.71638213  0.71354099  0.71321759  0.71586871  0.72045099
  0.7265517   0.73473987  0.74427389  0.7548312 ]

