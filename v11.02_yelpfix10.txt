liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [14.1 s]. #user=13679, #item=12922, #train_user=273580, #train_item=1015066, #cv=68395, #test=503353
Time: [37.3], Init: 
Init_NDCG1: [ 0.62430784  0.66191083  0.71522881  0.77906671  0.858621  ]
Init_NDCG2: [ 0.62323824  0.6617384   0.71529606  0.77940879  0.85847313]
Init_NDCG3: [ 0.6267196   0.66557718  0.71809691  0.78158532  0.85993084]
Init_NDCG4: [ 0.6200966   0.65924863  0.71248822  0.77745338  0.85738104]
Iteration 0 [57.6 s]: ranku_loss = 1.160961 [35.54 s],
NDCG1: [ 0.67025945  0.70013337  0.74581652  0.80283635  0.87486074]
NDCG2: [ 0.59153508  0.63063761  0.68695771  0.75608401  0.84524858]
NDCG3: [ 0.66942962  0.69904245  0.74493635  0.80210369  0.8744342 ]
NDCG4: [ 0.58702711  0.62790338  0.68340685  0.75374459  0.84382225]
Iteration 1 [37.0 s]: ranku_loss = 0.700803 [35.60 s],
NDCG1: [ 0.69606621  0.7214658   0.76292586  0.81618063  0.8837617 ]
NDCG2: [ 0.59524898  0.63392346  0.68999811  0.75911297  0.84673964]
NDCG3: [ 0.69030942  0.71723458  0.75933518  0.81304327  0.88180279]
NDCG4: [ 0.57101103  0.61383283  0.67051472  0.74303221  0.83781044]
Iteration 2 [36.6 s]: ranku_loss = 0.681277 [36.02 s],
NDCG1: [ 0.7254687   0.74647866  0.78594328  0.83444282  0.89468801]
NDCG2: [ 0.72963134  0.75281573  0.79220886  0.84043827  0.89720994]
NDCG3: [ 0.72330597  0.74409156  0.78233063  0.8319228   0.89350296]
NDCG4: [ 0.72204021  0.74489333  0.78521801  0.833947    0.89395389]
Iteration 3 [66.9 s]: ranku_loss = 0.625065 [35.46 s],
NDCG1: [ 0.73304608  0.75690658  0.79425954  0.84117933  0.89845225]
NDCG2: [ 0.73030646  0.7545572   0.79369295  0.84145181  0.89774442]
NDCG3: [ 0.73211528  0.75686427  0.79418573  0.84072092  0.89830545]
NDCG4: [ 0.73313556  0.75460638  0.79137244  0.83799194  0.89752923]
Iteration 4 [37.3 s]: ranku_loss = 0.599674 [35.35 s],
NDCG1: [ 0.73214475  0.75508395  0.79433015  0.8411942   0.89811411]
NDCG2: [ 0.72649279  0.75268829  0.79276251  0.84052699  0.896818  ]
NDCG3: [ 0.73216707  0.75474775  0.7938336   0.84070433  0.89799088]
NDCG4: [ 0.72928371  0.75084849  0.78872699  0.83530578  0.89593979]
End. Best Model is model1.
Test_NDCG:
[ 0.72690232  0.71704672  0.713063    0.71256767  0.71551619  0.72037609
  0.72677142  0.73510707  0.74452825  0.7550945 ]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [13.6 s]. #user=13679, #item=12922, #train_user=273580, #train_item=1015066, #cv=68395, #test=503353
Time: [35.8], Init: 
Init_NDCG1: [ 0.61935845  0.66031923  0.71409099  0.77858165  0.8577456 ]
Init_NDCG2: [ 0.61810631  0.65867358  0.71326423  0.77747416  0.85705655]
Init_NDCG3: [ 0.61803282  0.6573952   0.71254102  0.77837526  0.85706828]
Init_NDCG4: [ 0.62568966  0.66522197  0.71667699  0.78131454  0.85962233]
Iteration 0 [43.6 s]: ranku_loss = 1.489763 [36.95 s],
NDCG1: [ 0.69672584  0.72349853  0.76604349  0.81970007  0.88479253]
NDCG2: [ 0.57038604  0.61604009  0.67324497  0.74609227  0.83854701]
NDCG3: [ 0.69637871  0.72348667  0.76604736  0.81993962  0.88482328]
NDCG4: [ 0.56939208  0.61570284  0.67299575  0.74581484  0.83833193]
Iteration 1 [44.4 s]: ranku_loss = 0.676609 [41.22 s],
NDCG1: [ 0.72440193  0.75009154  0.78992879  0.83809855  0.89586092]
NDCG2: [ 0.72823922  0.75407869  0.79193488  0.84044753  0.89715534]
NDCG3: [ 0.7239589   0.75013453  0.78997337  0.83813182  0.8958228 ]
NDCG4: [ 0.72791046  0.75401203  0.79192241  0.84043246  0.89710415]
Iteration 2 [57.6 s]: ranku_loss = 0.620486 [36.76 s],
NDCG1: [ 0.73322948  0.75714254  0.79515255  0.84163994  0.89869472]
NDCG2: [ 0.73051111  0.7537549   0.79294646  0.84131602  0.89749925]
NDCG3: [ 0.73347613  0.75729806  0.79512876  0.84172031  0.89875804]
NDCG4: [ 0.73055859  0.7536346   0.79291733  0.84131283  0.89748121]
Iteration 3 [37.5 s]: ranku_loss = 0.603450 [38.22 s],
NDCG1: [ 0.73340377  0.75667872  0.79515903  0.84192028  0.89866221]
NDCG2: [ 0.72506681  0.75085653  0.79248437  0.84009608  0.89629897]
NDCG3: [ 0.73296765  0.75647588  0.79504849  0.84192742  0.89856598]
NDCG4: [ 0.72476528  0.75080652  0.79240574  0.84001338  0.89624594]
End. Best Model is model1.
Test_NDCG:
[ 0.72837542  0.71803875  0.71509622  0.71469363  0.71704383  0.72147884
  0.72787777  0.73610117  0.74536917  0.75590429]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [15.6 s]. #user=13679, #item=12922, #train_user=273580, #train_item=1015066, #cv=68395, #test=503353
Time: [41.3], Init: 
Init_NDCG1: [ 0.62469912  0.66232766  0.71466137  0.77914133  0.85866829]
Init_NDCG2: [ 0.6198226   0.66070345  0.7134914   0.77910669  0.857907  ]
Init_NDCG3: [ 0.61810357  0.65687044  0.71092864  0.77576398  0.85637854]
Init_NDCG4: [ 0.62528468  0.6627382   0.71511452  0.77910342  0.8589795 ]
Iteration 0 [44.9 s]: ranku_loss = 1.349473 [37.54 s],
NDCG1: [ 0.66533625  0.69887537  0.74567216  0.80265592  0.87411199]
NDCG2: [ 0.58367116  0.62478064  0.68218053  0.75368643  0.84289813]
NDCG3: [ 0.66581203  0.69837452  0.7455015   0.80254976  0.87410347]
NDCG4: [ 0.58259604  0.62440622  0.68187077  0.75321914  0.84263839]
Iteration 1 [48.3 s]: ranku_loss = 0.703436 [41.93 s],
NDCG1: [ 0.68555997  0.71622134  0.75989148  0.81374237  0.88131504]
NDCG2: [ 0.56703809  0.61024712  0.66928076  0.74382304  0.83682228]
NDCG3: [ 0.68514564  0.71514214  0.75906393  0.81286561  0.88094175]
NDCG4: [ 0.56452741  0.60871421  0.66818384  0.74263467  0.83613171]
Iteration 2 [58.3 s]: ranku_loss = 0.694354 [37.05 s],
NDCG1: [ 0.70642288  0.73348001  0.77510559  0.82586595  0.88880719]
NDCG2: [ 0.54473042  0.59211215  0.6547893   0.7315426   0.82924382]
NDCG3: [ 0.70505834  0.7327072   0.77462185  0.82512413  0.88846136]
NDCG4: [ 0.54288427  0.59017919  0.65318205  0.73018053  0.82848475]
Iteration 3 [38.4 s]: ranku_loss = 0.683210 [36.89 s],
NDCG1: [ 0.72354736  0.74722856  0.78725891  0.83579089  0.89485468]
NDCG2: [ 0.72386273  0.74885547  0.78901416  0.83709755  0.8954942 ]
NDCG3: [ 0.72318392  0.74681142  0.78698288  0.83548015  0.89473387]
NDCG4: [ 0.72109207  0.74641561  0.78685267  0.83518716  0.89445202]
Iteration 4 [71.9 s]: ranku_loss = 0.641975 [37.72 s],
NDCG1: [ 0.73370813  0.75549847  0.79316232  0.84089953  0.89818549]
NDCG2: [ 0.73145772  0.75367181  0.79048191  0.83802733  0.89703785]
NDCG3: [ 0.73401596  0.75538348  0.7933938   0.84079853  0.89822945]
NDCG4: [ 0.73193345  0.75292833  0.79025502  0.83806178  0.89699642]
Iteration 5 [37.7 s]: ranku_loss = 0.607487 [35.73 s],
NDCG1: [ 0.73229684  0.75541291  0.79426118  0.84085538  0.89804933]
NDCG2: [ 0.72894233  0.75380775  0.79314664  0.84020812  0.89727525]
NDCG3: [ 0.73233206  0.75519623  0.79406366  0.84083095  0.89799285]
NDCG4: [ 0.72919765  0.75335333  0.79259948  0.83961636  0.89709944]
End. Best Model is model1.
Test_NDCG:
[ 0.72818204  0.71759842  0.71487737  0.71420139  0.71649379  0.72151329
  0.72756224  0.73537507  0.74469335  0.75546986]

