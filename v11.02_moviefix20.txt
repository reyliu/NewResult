liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [285.5 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [434.3], Init: 
Init_NDCG1: [ 0.60721793  0.65899853  0.71784184  0.78314538  0.857724  ]
Init_NDCG2: [ 0.60915882  0.6607051   0.72013805  0.78506833  0.85855268]
Init_NDCG3: [ 0.60664287  0.65932432  0.71836767  0.78301025  0.85774915]
Init_NDCG4: [ 0.59402841  0.64802546  0.70909438  0.77622834  0.85312873]
Iteration 0 [317.7 s]: ranku_loss = 0.884353 [350.90 s],
NDCG1: [ 0.73093629  0.76653237  0.80923176  0.853834    0.90318055]
NDCG2: [ 0.49728437  0.5593038   0.63185459  0.71507975  0.81635311]
NDCG3: [ 0.72902429  0.76550525  0.80840913  0.85304876  0.90265228]
NDCG4: [ 0.49280229  0.55525384  0.62837294  0.71184027  0.81466857]
Iteration 1 [469.9 s]: ranku_loss = 0.664052 [389.62 s],
NDCG1: [ 0.75707174  0.79329105  0.83409564  0.87454685  0.91451251]
NDCG2: [ 0.74312394  0.78689954  0.8299663   0.87108644  0.91126929]
NDCG3: [ 0.75644836  0.79294077  0.8338025   0.87434999  0.91433823]
NDCG4: [ 0.73895982  0.78451163  0.82859728  0.86990129  0.91021198]
Iteration 2 [444.3 s]: ranku_loss = 0.636150 [434.67 s],
NDCG1: [ 0.75980775  0.79623318  0.83673838  0.87690077  0.9157216 ]
NDCG2: [ 0.75553323  0.79470668  0.83592735  0.87590214  0.91484167]
NDCG3: [ 0.75947316  0.79606348  0.83646768  0.87667897  0.91560588]
NDCG4: [ 0.74193718  0.78784483  0.83169847  0.87244105  0.91158433]
Iteration 3 [430.1 s]: ranku_loss = 0.633297 [386.20 s],
NDCG1: [ 0.75998094  0.79647202  0.83695054  0.8770969   0.9158269 ]
NDCG2: [ 0.75939808  0.79657264  0.83703894  0.8771919   0.91580475]
NDCG3: [ 0.75970653  0.79646866  0.83679159  0.87711097  0.91576113]
NDCG4: [ 0.74204852  0.78787003  0.83151181  0.87274323  0.91160453]
Iteration 4 [452.6 s]: ranku_loss = 0.627755 [386.64 s],
NDCG1: [ 0.76007006  0.79634497  0.83705546  0.87716906  0.91583966]
NDCG2: [ 0.75830775  0.79644954  0.83715392  0.87737834  0.91568408]
NDCG3: [ 0.75811324  0.79538885  0.83601779  0.87640756  0.91529446]
NDCG4: [ 0.74215113  0.78797945  0.83121937  0.87298552  0.9116273 ]
Iteration 5 [444.1 s]: ranku_loss = 0.618652 [451.12 s],
NDCG1: [ 0.75996708  0.79493288  0.83601557  0.87628789  0.91546078]
NDCG2: [ 0.75241602  0.79185966  0.83402944  0.87512329  0.91384639]
NDCG3: [ 0.75357607  0.79036262  0.83082555  0.87149178  0.91303789]
NDCG4: [ 0.72579368  0.77549787  0.8224285   0.86617406  0.90645802]
End. Best Model is model1.
Test_NDCG:
[ 0.72382861  0.71644048  0.7129565   0.71116565  0.71171271  0.71322537
  0.71551715  0.7185179   0.72185303  0.7253138 ]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [328.6 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [422.7], Init: 
Init_NDCG1: [ 0.61448451  0.66451048  0.72304433  0.78690061  0.86019025]
Init_NDCG2: [ 0.61565418  0.66663359  0.7249997   0.78821835  0.86092907]
Init_NDCG3: [ 0.60298705  0.65618729  0.71608864  0.78210807  0.85658113]
Init_NDCG4: [ 0.60640185  0.65799785  0.71747976  0.78288022  0.85736978]
Iteration 0 [404.1 s]: ranku_loss = 1.007420 [368.14 s],
NDCG1: [ 0.52725331  0.59373609  0.66535874  0.74263553  0.83063868]
NDCG2: [ 0.6707485   0.7189521   0.77276085  0.82718602  0.88316929]
NDCG3: [ 0.52473474  0.59102756  0.66331682  0.74092204  0.82960471]
NDCG4: [ 0.67093439  0.71898304  0.77284848  0.82728761  0.88322037]
Iteration 1 [450.4 s]: ranku_loss = 0.679592 [367.80 s],
NDCG1: [ 0.75329685  0.78966126  0.83030004  0.87136181  0.91286976]
NDCG2: [ 0.75067878  0.78674854  0.82770843  0.86990183  0.91168615]
NDCG3: [ 0.75345563  0.78943518  0.83021994  0.87126022  0.91284386]
NDCG4: [ 0.75070009  0.78675165  0.82773293  0.86989316  0.91168968]
Iteration 2 [460.5 s]: ranku_loss = 0.638503 [371.53 s],
NDCG1: [ 0.75921767  0.79537572  0.83613295  0.87627662  0.91543549]
NDCG2: [ 0.75749674  0.7940489   0.83504879  0.8756448   0.91487507]
NDCG3: [ 0.75957008  0.79548363  0.83623736  0.87632725  0.91550813]
NDCG4: [ 0.75741551  0.79400341  0.83498972  0.87559617  0.91485217]
Iteration 3 [441.6 s]: ranku_loss = 0.634196 [367.27 s],
NDCG1: [ 0.7604777   0.79643262  0.83685472  0.87702042  0.91584264]
NDCG2: [ 0.75844361  0.79536781  0.83605363  0.87652326  0.91536049]
NDCG3: [ 0.76085895  0.79664139  0.83693384  0.8771588   0.91594844]
NDCG4: [ 0.75834543  0.79534259  0.8359909   0.87649793  0.91533433]
Iteration 4 [473.5 s]: ranku_loss = 0.632260 [393.82 s],
NDCG1: [ 0.76144082  0.79697331  0.83763396  0.87748119  0.91617931]
NDCG2: [ 0.75881559  0.79645413  0.83678177  0.87710335  0.91569011]
NDCG3: [ 0.76146019  0.79700782  0.83750223  0.87753349  0.91617782]
NDCG4: [ 0.75904765  0.79651606  0.83685824  0.87712941  0.91572609]
Iteration 5 [458.2 s]: ranku_loss = 0.628869 [403.07 s],
NDCG1: [ 0.75990608  0.79674423  0.83708656  0.8774226   0.91586495]
NDCG2: [ 0.75884652  0.79615841  0.83651418  0.87721752  0.91558692]
NDCG3: [ 0.76030986  0.79664357  0.837036    0.87732924  0.91591031]
NDCG4: [ 0.75906175  0.79616472  0.836623    0.87720071  0.91563602]
End. Best Model is model1.
Test_NDCG:
[ 0.72281639  0.71613985  0.71274238  0.71219323  0.71325992  0.71503561
  0.7176337   0.72041253  0.72355423  0.72702376]

liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [180.4 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [428.4], Init: 
Init_NDCG1: [ 0.60642605  0.65889004  0.71886274  0.78450623  0.85788705]
Init_NDCG2: [ 0.60722347  0.65923517  0.71875284  0.78358779  0.85791706]
Init_NDCG3: [ 0.60824303  0.66054071  0.72002966  0.78473612  0.85841669]
Init_NDCG4: [ 0.60577864  0.65799009  0.71801495  0.78357837  0.85742238]
Iteration 0 [414.1 s]: ranku_loss = 0.883452 [425.63 s],
NDCG1: [ 0.7011343   0.74021232  0.7861602   0.83577557  0.89191338]
NDCG2: [ 0.54366459  0.60396543  0.67271232  0.74842852  0.83501388]
NDCG3: [ 0.69237767  0.73429001  0.78149265  0.83207409  0.88924462]
NDCG4: [ 0.52570354  0.58431065  0.65195079  0.73081956  0.82649562]
Iteration 1 [422.9 s]: ranku_loss = 0.670358 [422.91 s],
NDCG1: [ 0.75605327  0.79210314  0.8319999   0.87249428  0.91378081]
NDCG2: [ 0.75692784  0.79251532  0.83285554  0.87368451  0.91418455]
NDCG3: [ 0.75513887  0.79046507  0.83051003  0.87124474  0.9131787 ]
NDCG4: [ 0.73450318  0.76843864  0.81002344  0.85474748  0.9040096 ]
Iteration 2 [427.0 s]: ranku_loss = 0.636154 [422.65 s],
NDCG1: [ 0.7607576   0.79688572  0.83662157  0.87679605  0.91588808]
NDCG2: [ 0.75832906  0.79471028  0.83546292  0.87583607  0.91510583]
NDCG3: [ 0.75842954  0.79467655  0.83460317  0.87510735  0.91494991]
NDCG4: [ 0.65224212  0.70089007  0.7532443   0.81020519  0.87486573]
Iteration 3 [454.5 s]: ranku_loss = 0.628725 [421.29 s],
NDCG1: [ 0.76110081  0.79742586  0.83752375  0.87759908  0.91618265]
NDCG2: [ 0.75857018  0.79582341  0.83654217  0.87677439  0.91547794]
NDCG3: [ 0.75345567  0.78986156  0.8298418   0.8708076   0.91281772]
NDCG4: [ 0.58481471  0.64055224  0.70143352  0.76871591  0.84978991]
Iteration 4 [442.7 s]: ranku_loss = 0.618921 [442.86 s],
NDCG1: [ 0.76060861  0.79725299  0.83754979  0.87757812  0.91610646]
NDCG2: [ 0.74931846  0.78837957  0.83102978  0.87304913  0.9124614 ]
NDCG3: [ 0.71399929  0.74986295  0.79186648  0.83935958  0.89580653]
NDCG4: [ 0.52184218  0.58407221  0.65256018  0.73001422  0.8262074 ]
End. Best Model is model1.
Test_NDCG:
[ 0.71889526  0.71062812  0.70875727  0.70844316  0.70952493  0.71151866
  0.71435799  0.71755422  0.72105922  0.72473371]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [177.2 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [427.2], Init: 
Init_NDCG1: [ 0.60447714  0.65583204  0.7158212   0.78141369  0.85659434]
Init_NDCG2: [ 0.59918234  0.65415316  0.71487217  0.78095863  0.85561376]
Init_NDCG3: [ 0.60077554  0.65432848  0.71459287  0.78126081  0.85586223]
Init_NDCG4: [ 0.59680386  0.64873656  0.70957201  0.77736434  0.85378786]
Iteration 0 [400.4 s]: ranku_loss = 0.976852 [426.25 s],
NDCG1: [ 0.6760502   0.72343092  0.77360238  0.82608628  0.88445558]
NDCG2: [ 0.53680352  0.59634855  0.6655276   0.74309835  0.83190431]
NDCG3: [ 0.67521092  0.7224295   0.77280508  0.82548153  0.88407892]
NDCG4: [ 0.5361245   0.59554524  0.66488077  0.7425945   0.83159541]
Iteration 1 [463.9 s]: ranku_loss = 0.668141 [420.42 s],
NDCG1: [ 0.75769091  0.79297991  0.83298201  0.87338735  0.91430266]
NDCG2: [ 0.75676092  0.7921742   0.83112514  0.87102753  0.91361362]
NDCG3: [ 0.75778944  0.79304962  0.83300828  0.87341118  0.91433066]
NDCG4: [ 0.75674805  0.79210786  0.83106507  0.87098829  0.91359465]
Iteration 2 [451.7 s]: ranku_loss = 0.638358 [422.10 s],
NDCG1: [ 0.76009864  0.79589375  0.83647508  0.87657227  0.91563497]
NDCG2: [ 0.75905396  0.79528054  0.83590592  0.87594193  0.91533226]
NDCG3: [ 0.76032365  0.79593404  0.8364801   0.87662543  0.91568155]
NDCG4: [ 0.75891696  0.79520783  0.83583637  0.8758859   0.91529005]
Iteration 3 [440.4 s]: ranku_loss = 0.630105 [421.49 s],
NDCG1: [ 0.76075798  0.79707421  0.83715714  0.87745171  0.91607697]
NDCG2: [ 0.75849922  0.79491112  0.83589949  0.87644569  0.91528805]
NDCG3: [ 0.76075835  0.79716441  0.83717703  0.87746366  0.91608826]
NDCG4: [ 0.75837291  0.79508889  0.83592071  0.87645301  0.91529597]
Iteration 4 [449.2 s]: ranku_loss = 0.624758 [449.79 s],
NDCG1: [ 0.76081031  0.79740252  0.83766786  0.87757977  0.9161943 ]
NDCG2: [ 0.75430167  0.79270152  0.83461196  0.87546039  0.91430913]
NDCG3: [ 0.76076318  0.79745852  0.83774865  0.87758725  0.91619732]
NDCG4: [ 0.75398248  0.79265049  0.83442419  0.87537334  0.91423461]
Iteration 5 [483.6 s]: ranku_loss = 0.621156 [439.25 s],
NDCG1: [ 0.76124111  0.79688819  0.83729646  0.87719613  0.91607741]
NDCG2: [ 0.75048524  0.7894919   0.83170392  0.87330299  0.91287051]
NDCG3: [ 0.76067262  0.79647497  0.83660132  0.87643968  0.91582722]
NDCG4: [ 0.74950528  0.78862443  0.83115954  0.87291632  0.91256185]
End. Best Model is model3.
Test_NDCG:
[ 0.72397597  0.71619839  0.71229126  0.71108334  0.7117017   0.71343953
  0.71570117  0.71857696  0.72176357  0.7254368 ]
Test_NDCG By model1:
[ 0.72146994  0.71466689  0.7109064   0.70984799  0.71094462  0.712721
  0.7153564   0.71822514  0.72161672  0.72525297]

