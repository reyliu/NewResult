liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [285.5 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [434.3], Init: 
Init_NDCG1: [ 0.60721793  0.65899853  0.71784184  0.78314538  0.857724  ]
Init_NDCG2: [ 0.60915882  0.6607051   0.72013805  0.78506833  0.85855268]
Init_NDCG3: [ 0.60664287  0.65932432  0.71836767  0.78301025  0.85774915]
Init_NDCG4: [ 0.59402841  0.64802546  0.70909438  0.77622834  0.85312873]
Iteration 0 [317.7 s]: ranku_loss = 0.884353 [350.90 s],
NDCG1: [ 0.73093629  0.76653237  0.80923176  0.853834    0.90318055]
NDCG2: [ 0.49728437  0.5593038   0.63185459  0.71507975  0.81635311]
NDCG3: [ 0.72902429  0.76550525  0.80840913  0.85304876  0.90265228]
NDCG4: [ 0.49280229  0.55525384  0.62837294  0.71184027  0.81466857]
Iteration 1 [469.9 s]: ranku_loss = 0.664052 [389.62 s],
NDCG1: [ 0.75707174  0.79329105  0.83409564  0.87454685  0.91451251]
NDCG2: [ 0.74312394  0.78689954  0.8299663   0.87108644  0.91126929]
NDCG3: [ 0.75644836  0.79294077  0.8338025   0.87434999  0.91433823]
NDCG4: [ 0.73895982  0.78451163  0.82859728  0.86990129  0.91021198]
Iteration 2 [444.3 s]: ranku_loss = 0.636150 [434.67 s],
NDCG1: [ 0.75980775  0.79623318  0.83673838  0.87690077  0.9157216 ]
NDCG2: [ 0.75553323  0.79470668  0.83592735  0.87590214  0.91484167]
NDCG3: [ 0.75947316  0.79606348  0.83646768  0.87667897  0.91560588]
NDCG4: [ 0.74193718  0.78784483  0.83169847  0.87244105  0.91158433]
Iteration 3 [430.1 s]: ranku_loss = 0.633297 [386.20 s],
NDCG1: [ 0.75998094  0.79647202  0.83695054  0.8770969   0.9158269 ]
NDCG2: [ 0.75939808  0.79657264  0.83703894  0.8771919   0.91580475]
NDCG3: [ 0.75970653  0.79646866  0.83679159  0.87711097  0.91576113]
NDCG4: [ 0.74204852  0.78787003  0.83151181  0.87274323  0.91160453]
Iteration 4 [452.6 s]: ranku_loss = 0.627755 [386.64 s],
NDCG1: [ 0.76007006  0.79634497  0.83705546  0.87716906  0.91583966]
NDCG2: [ 0.75830775  0.79644954  0.83715392  0.87737834  0.91568408]
NDCG3: [ 0.75811324  0.79538885  0.83601779  0.87640756  0.91529446]
NDCG4: [ 0.74215113  0.78797945  0.83121937  0.87298552  0.9116273 ]
Iteration 5 [444.1 s]: ranku_loss = 0.618652 [451.12 s],
NDCG1: [ 0.75996708  0.79493288  0.83601557  0.87628789  0.91546078]
NDCG2: [ 0.75241602  0.79185966  0.83402944  0.87512329  0.91384639]
NDCG3: [ 0.75357607  0.79036262  0.83082555  0.87149178  0.91303789]
NDCG4: [ 0.72579368  0.77549787  0.8224285   0.86617406  0.90645802]
End. Best Model is model1.
Test_NDCG:
[ 0.72382861  0.71644048  0.7129565   0.71116565  0.71171271  0.71322537
  0.71551715  0.7185179   0.72185303  0.7253138 ]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [328.6 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [422.7], Init: 
Init_NDCG1: [ 0.61448451  0.66451048  0.72304433  0.78690061  0.86019025]
Init_NDCG2: [ 0.61565418  0.66663359  0.7249997   0.78821835  0.86092907]
Init_NDCG3: [ 0.60298705  0.65618729  0.71608864  0.78210807  0.85658113]
Init_NDCG4: [ 0.60640185  0.65799785  0.71747976  0.78288022  0.85736978]
Iteration 0 [404.1 s]: ranku_loss = 1.007420 [368.14 s],
NDCG1: [ 0.52725331  0.59373609  0.66535874  0.74263553  0.83063868]
NDCG2: [ 0.6707485   0.7189521   0.77276085  0.82718602  0.88316929]
NDCG3: [ 0.52473474  0.59102756  0.66331682  0.74092204  0.82960471]
NDCG4: [ 0.67093439  0.71898304  0.77284848  0.82728761  0.88322037]
Iteration 1 [450.4 s]: ranku_loss = 0.679592 [367.80 s],
NDCG1: [ 0.75329685  0.78966126  0.83030004  0.87136181  0.91286976]
NDCG2: [ 0.75067878  0.78674854  0.82770843  0.86990183  0.91168615]
NDCG3: [ 0.75345563  0.78943518  0.83021994  0.87126022  0.91284386]
NDCG4: [ 0.75070009  0.78675165  0.82773293  0.86989316  0.91168968]
Iteration 2 [460.5 s]: ranku_loss = 0.638503 [371.53 s],
NDCG1: [ 0.75921767  0.79537572  0.83613295  0.87627662  0.91543549]
NDCG2: [ 0.75749674  0.7940489   0.83504879  0.8756448   0.91487507]
NDCG3: [ 0.75957008  0.79548363  0.83623736  0.87632725  0.91550813]
NDCG4: [ 0.75741551  0.79400341  0.83498972  0.87559617  0.91485217]
Iteration 3 [441.6 s]: ranku_loss = 0.634196 [367.27 s],
NDCG1: [ 0.7604777   0.79643262  0.83685472  0.87702042  0.91584264]
NDCG2: [ 0.75844361  0.79536781  0.83605363  0.87652326  0.91536049]
NDCG3: [ 0.76085895  0.79664139  0.83693384  0.8771588   0.91594844]
NDCG4: [ 0.75834543  0.79534259  0.8359909   0.87649793  0.91533433]
Iteration 4 [473.5 s]: ranku_loss = 0.632260 [393.82 s],
NDCG1: [ 0.76144082  0.79697331  0.83763396  0.87748119  0.91617931]
NDCG2: [ 0.75881559  0.79645413  0.83678177  0.87710335  0.91569011]
NDCG3: [ 0.76146019  0.79700782  0.83750223  0.87753349  0.91617782]
NDCG4: [ 0.75904765  0.79651606  0.83685824  0.87712941  0.91572609]
Iteration 5 [458.2 s]: ranku_loss = 0.628869 [403.07 s],
NDCG1: [ 0.75990608  0.79674423  0.83708656  0.8774226   0.91586495]
NDCG2: [ 0.75884652  0.79615841  0.83651418  0.87721752  0.91558692]
NDCG3: [ 0.76030986  0.79664357  0.837036    0.87732924  0.91591031]
NDCG4: [ 0.75906175  0.79616472  0.836623    0.87720071  0.91563602]
End. Best Model is model1.
Test_NDCG:
[ 0.72281639  0.71613985  0.71274238  0.71219323  0.71325992  0.71503561
  0.7176337   0.72041253  0.72355423  0.72702376]

liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [180.4 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [428.4], Init: 
Init_NDCG1: [ 0.60642605  0.65889004  0.71886274  0.78450623  0.85788705]
Init_NDCG2: [ 0.60722347  0.65923517  0.71875284  0.78358779  0.85791706]
Init_NDCG3: [ 0.60824303  0.66054071  0.72002966  0.78473612  0.85841669]
Init_NDCG4: [ 0.60577864  0.65799009  0.71801495  0.78357837  0.85742238]
Iteration 0 [414.1 s]: ranku_loss = 0.883452 [425.63 s],
NDCG1: [ 0.7011343   0.74021232  0.7861602   0.83577557  0.89191338]
NDCG2: [ 0.54366459  0.60396543  0.67271232  0.74842852  0.83501388]
NDCG3: [ 0.69237767  0.73429001  0.78149265  0.83207409  0.88924462]
NDCG4: [ 0.52570354  0.58431065  0.65195079  0.73081956  0.82649562]
Iteration 1 [422.9 s]: ranku_loss = 0.670358 [422.91 s],
NDCG1: [ 0.75605327  0.79210314  0.8319999   0.87249428  0.91378081]
NDCG2: [ 0.75692784  0.79251532  0.83285554  0.87368451  0.91418455]
NDCG3: [ 0.75513887  0.79046507  0.83051003  0.87124474  0.9131787 ]
NDCG4: [ 0.73450318  0.76843864  0.81002344  0.85474748  0.9040096 ]
Iteration 2 [427.0 s]: ranku_loss = 0.636154 [422.65 s],
NDCG1: [ 0.7607576   0.79688572  0.83662157  0.87679605  0.91588808]
NDCG2: [ 0.75832906  0.79471028  0.83546292  0.87583607  0.91510583]
NDCG3: [ 0.75842954  0.79467655  0.83460317  0.87510735  0.91494991]
NDCG4: [ 0.65224212  0.70089007  0.7532443   0.81020519  0.87486573]
Iteration 3 [454.5 s]: ranku_loss = 0.628725 [421.29 s],
NDCG1: [ 0.76110081  0.79742586  0.83752375  0.87759908  0.91618265]
NDCG2: [ 0.75857018  0.79582341  0.83654217  0.87677439  0.91547794]
NDCG3: [ 0.75345567  0.78986156  0.8298418   0.8708076   0.91281772]
NDCG4: [ 0.58481471  0.64055224  0.70143352  0.76871591  0.84978991]
Iteration 4 [442.7 s]: ranku_loss = 0.618921 [442.86 s],
NDCG1: [ 0.76060861  0.79725299  0.83754979  0.87757812  0.91610646]
NDCG2: [ 0.74931846  0.78837957  0.83102978  0.87304913  0.9124614 ]
NDCG3: [ 0.71399929  0.74986295  0.79186648  0.83935958  0.89580653]
NDCG4: [ 0.52184218  0.58407221  0.65256018  0.73001422  0.8262074 ]
End. Best Model is model1.
Test_NDCG:
[ 0.71889526  0.71062812  0.70875727  0.70844316  0.70952493  0.71151866
  0.71435799  0.71755422  0.72105922  0.72473371]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [177.2 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [427.2], Init: 
Init_NDCG1: [ 0.60447714  0.65583204  0.7158212   0.78141369  0.85659434]
Init_NDCG2: [ 0.59918234  0.65415316  0.71487217  0.78095863  0.85561376]
Init_NDCG3: [ 0.60077554  0.65432848  0.71459287  0.78126081  0.85586223]
Init_NDCG4: [ 0.59680386  0.64873656  0.70957201  0.77736434  0.85378786]
Iteration 0 [400.4 s]: ranku_loss = 0.976852 [426.25 s],
NDCG1: [ 0.6760502   0.72343092  0.77360238  0.82608628  0.88445558]
NDCG2: [ 0.53680352  0.59634855  0.6655276   0.74309835  0.83190431]
NDCG3: [ 0.67521092  0.7224295   0.77280508  0.82548153  0.88407892]
NDCG4: [ 0.5361245   0.59554524  0.66488077  0.7425945   0.83159541]
Iteration 1 [463.9 s]: ranku_loss = 0.668141 [420.42 s],
NDCG1: [ 0.75769091  0.79297991  0.83298201  0.87338735  0.91430266]
NDCG2: [ 0.75676092  0.7921742   0.83112514  0.87102753  0.91361362]
NDCG3: [ 0.75778944  0.79304962  0.83300828  0.87341118  0.91433066]
NDCG4: [ 0.75674805  0.79210786  0.83106507  0.87098829  0.91359465]
Iteration 2 [451.7 s]: ranku_loss = 0.638358 [422.10 s],
NDCG1: [ 0.76009864  0.79589375  0.83647508  0.87657227  0.91563497]
NDCG2: [ 0.75905396  0.79528054  0.83590592  0.87594193  0.91533226]
NDCG3: [ 0.76032365  0.79593404  0.8364801   0.87662543  0.91568155]
NDCG4: [ 0.75891696  0.79520783  0.83583637  0.8758859   0.91529005]
Iteration 3 [440.4 s]: ranku_loss = 0.630105 [421.49 s],
NDCG1: [ 0.76075798  0.79707421  0.83715714  0.87745171  0.91607697]
NDCG2: [ 0.75849922  0.79491112  0.83589949  0.87644569  0.91528805]
NDCG3: [ 0.76075835  0.79716441  0.83717703  0.87746366  0.91608826]
NDCG4: [ 0.75837291  0.79508889  0.83592071  0.87645301  0.91529597]
Iteration 4 [449.2 s]: ranku_loss = 0.624758 [449.79 s],
NDCG1: [ 0.76081031  0.79740252  0.83766786  0.87757977  0.9161943 ]
NDCG2: [ 0.75430167  0.79270152  0.83461196  0.87546039  0.91430913]
NDCG3: [ 0.76076318  0.79745852  0.83774865  0.87758725  0.91619732]
NDCG4: [ 0.75398248  0.79265049  0.83442419  0.87537334  0.91423461]
Iteration 5 [483.6 s]: ranku_loss = 0.621156 [439.25 s],
NDCG1: [ 0.76124111  0.79688819  0.83729646  0.87719613  0.91607741]
NDCG2: [ 0.75048524  0.7894919   0.83170392  0.87330299  0.91287051]
NDCG3: [ 0.76067262  0.79647497  0.83660132  0.87643968  0.91582722]
NDCG4: [ 0.74950528  0.78862443  0.83115954  0.87291632  0.91256185]
End. Best Model is model3.
Test_NDCG:
[ 0.72397597  0.71619839  0.71229126  0.71108334  0.7117017   0.71343953
  0.71570117  0.71857696  0.72176357  0.7254368 ]
Test_NDCG By model1:
[ 0.72146994  0.71466689  0.7109064   0.70984799  0.71094462  0.712721
  0.7153564   0.71822514  0.72161672  0.72525297]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [177.5 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [336.8], Init: 
Init_NDCG1: [ 0.60252851  0.65646046  0.71647458  0.78241409  0.85660575]
Init_NDCG2: [ 0.60101761  0.65552367  0.71595326  0.78158235  0.85619285]
Init_NDCG3: [ 0.60478456  0.65799879  0.71735007  0.78312338  0.85724485]
Init_NDCG4: [ 0.60342409  0.657903    0.71785821  0.7829343   0.85710273]
Iteration 0 [230.6 s]: ranku_loss = 0.998357 [320.95 s],
NDCG1: [ 0.5546027   0.61678402  0.68538009  0.75957538  0.84048306]
NDCG2: [ 0.63146828  0.6882588   0.74660753  0.80640631  0.86972892]
NDCG3: [ 0.55468098  0.61658383  0.68516337  0.75949088  0.84043574]
NDCG4: [ 0.63145092  0.68809477  0.74649233  0.80630123  0.86968826]
Iteration 1 [260.6 s]: ranku_loss = 0.694691 [322.37 s],
NDCG1: [ 0.51434836  0.5808288   0.65186057  0.73212768  0.82494911]
NDCG2: [ 0.6868768   0.7334943   0.78277723  0.8347213   0.88878743]
NDCG3: [ 0.51309788  0.57919055  0.65046138  0.73133071  0.82437041]
NDCG4: [ 0.68651244  0.73309765  0.7824337   0.8345559   0.88863777]
Iteration 2 [258.3 s]: ranku_loss = 0.692042 [320.30 s],
NDCG1: [ 0.54259759  0.60144695  0.66829147  0.7439747   0.83371965]
NDCG2: [ 0.71760707  0.75800936  0.80319761  0.84995688  0.89939496]
NDCG3: [ 0.49498066  0.56092747  0.63400338  0.71735829  0.81685748]
NDCG4: [ 0.71674276  0.75727518  0.8024374   0.84937137  0.89905141]
Iteration 3 [257.9 s]: ranku_loss = 0.656326 [319.89 s],
NDCG1: [ 0.75744336  0.79329755  0.83415255  0.87454414  0.91457624]
NDCG2: [ 0.75496819  0.79093039  0.83182975  0.87239753  0.91346197]
NDCG3: [ 0.46483849  0.5346788   0.61148404  0.6995253   0.8059469 ]
NDCG4: [ 0.7511361   0.78690124  0.82843135  0.86998195  0.91187115]
Iteration 4 [257.0 s]: ranku_loss = 0.633384 [322.02 s],
NDCG1: [ 0.75968937  0.79636539  0.83675273  0.87685141  0.91573388]
NDCG2: [ 0.75905228  0.79496603  0.83554087  0.87617294  0.91525546]
NDCG3: [ 0.47335003  0.54487622  0.62219935  0.708507    0.81019849]
NDCG4: [ 0.74172427  0.78182195  0.82476898  0.86783695  0.90949608]
Iteration 5 [257.2 s]: ranku_loss = 0.622339 [321.48 s],
NDCG1: [ 0.75971589  0.79654708  0.83708495  0.87723088  0.91583084]
NDCG2: [ 0.75830915  0.79536689  0.83618657  0.87645482  0.91531509]
NDCG3: [ 0.51495361  0.58385811  0.65602224  0.73440048  0.82596244]
NDCG4: [ 0.70388907  0.74315019  0.79117515  0.84105167  0.89365975]
Iteration 6 [257.6 s]: ranku_loss = 0.613252 [334.18 s],
NDCG1: [ 0.75923172  0.79565912  0.83552831  0.8762577   0.91537222]
NDCG2: [ 0.7579573   0.79450657  0.83577302  0.87627846  0.9151112 ]
NDCG3: [ 0.5310575   0.59716349  0.66711644  0.74284787  0.83147876]
NDCG4: [ 0.66214079  0.70493055  0.75564574  0.81156093  0.87699952]
End. Best Model is model1.
Test_NDCG:
[ 0.72082959  0.7152871   0.71298928  0.71165217  0.71216142  0.71394736
  0.71626902  0.71912275  0.72224264  0.72600167]



liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [161.5 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [321.5], Init: 
Init_NDCG1: [ 0.59642715  0.65075231  0.71195962  0.77830725  0.85424694]
Init_NDCG2: [ 0.60495842  0.65754846  0.7169992   0.78217886  0.85708731]
Init_NDCG3: [ 0.61017078  0.66134154  0.72007902  0.78449238  0.8587182 ]
Init_NDCG4: [ 0.60054457  0.65439883  0.71498395  0.78145485  0.85588025]
Iteration 0 [229.0 s]: ranku_loss = 0.906345 [317.86 s],
NDCG1: [ 0.64948545  0.7019819   0.75674271  0.81319918  0.875454  ]
NDCG2: [ 0.55942991  0.61862664  0.68642727  0.76007713  0.84130277]
NDCG3: [ 0.64443954  0.69751897  0.75345514  0.81094388  0.87371206]
NDCG4: [ 0.55654521  0.61573349  0.6836497   0.75777756  0.84006086]
Iteration 1 [255.8 s]: ranku_loss = 0.684130 [317.70 s],
NDCG1: [ 0.75074074  0.78811609  0.82915176  0.87029632  0.91213064]
NDCG2: [ 0.74643766  0.78537738  0.82699458  0.86855051  0.91086544]
NDCG3: [ 0.74780131  0.78649708  0.82788783  0.86928563  0.91134417]
NDCG4: [ 0.74413505  0.78417509  0.82605966  0.86784848  0.91025834]
Iteration 2 [255.7 s]: ranku_loss = 0.639584 [319.78 s],
NDCG1: [ 0.75942786  0.79557431  0.83582093  0.87627463  0.9154343 ]
NDCG2: [ 0.75707224  0.79473836  0.835235    0.8759555   0.9149787 ]
NDCG3: [ 0.74927795  0.79065552  0.83266702  0.87345824  0.91301415]
NDCG4: [ 0.75321281  0.79299921  0.83398066  0.87497591  0.9140496 ]
Iteration 3 [259.6 s]: ranku_loss = 0.630336 [348.51 s],
NDCG1: [ 0.75917675  0.79596958  0.8361544   0.87649197  0.91551339]
NDCG2: [ 0.75863611  0.7953352   0.83621256  0.87673562  0.91542432]
NDCG3: [ 0.74404889  0.78790723  0.83039015  0.87201264  0.91163704]
NDCG4: [ 0.7560504   0.7938678   0.83506884  0.87591843  0.9147401 ]
Iteration 4 [255.7 s]: ranku_loss = 0.622628 [319.22 s],
NDCG1: [ 0.75979166  0.79581503  0.83618321  0.87640826  0.91555054]
NDCG2: [ 0.75835076  0.79531068  0.83591725  0.87673193  0.91532123]
NDCG3: [ 0.74572061  0.78605873  0.82885674  0.87028498  0.91127089]
NDCG4: [ 0.7493867   0.78921975  0.8319914   0.87363881  0.91277721]
Iteration 5 [253.1 s]: ranku_loss = 0.615623 [317.68 s],
NDCG1: [ 0.76028269  0.79656954  0.83693785  0.87679003  0.91586418]
NDCG2: [ 0.75830495  0.79557629  0.8362908   0.87685127  0.91537507]
NDCG3: [ 0.73976161  0.77963522  0.82266484  0.86517082  0.90852407]
NDCG4: [ 0.74312818  0.78374169  0.82748731  0.87028211  0.91051708]
Iteration 6 [254.5 s]: ranku_loss = 0.609617 [318.08 s],
NDCG1: [ 0.75940519  0.79577893  0.8361441   0.87602689  0.91545136]
NDCG2: [ 0.75630623  0.7933168   0.83411372  0.87517228  0.91444278]
NDCG3: [ 0.7327377   0.7704423   0.81394757  0.85833702  0.90489543]
NDCG4: [ 0.73361301  0.77487617  0.82060786  0.86456301  0.90695069]
End. Best Model is model1.
Test_NDCG:
[ 0.72335503  0.7172537   0.71377468  0.71250566  0.71313909  0.71450421
  0.71681337  0.71956061  0.72293228  0.72654487]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [176.2 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [390.2], Init: 
Init_NDCG1: [ 0.60311071  0.65611961  0.71623894  0.78238259  0.85664936]
Init_NDCG2: [ 0.59350626  0.64902365  0.71021382  0.77688256  0.85339074]
Init_NDCG3: [ 0.59871366  0.65157948  0.71197417  0.77835561  0.85473997]
Init_NDCG4: [ 0.61726539  0.66625447  0.72463638  0.78838728  0.86110912]
Iteration 0 [85.8 s]: ranku_loss = 1.264957 [387.75 s],
NDCG1: [ 0.71223092  0.74810491  0.79211541  0.84066394  0.89546916]
NDCG2: [ 0.52054975  0.58018161  0.64837604  0.72706324  0.82463676]
NDCG3: [ 0.71218067  0.7481883   0.79215923  0.84063601  0.89547574]
NDCG4: [ 0.51942604  0.57895159  0.64688492  0.72582794  0.82406214]
Iteration 1 [102.4 s]: ranku_loss = 0.691774 [347.48 s],
NDCG1: [ 0.73902062  0.77416987  0.81578102  0.85945064  0.906424  ]
NDCG2: [ 0.51741436  0.58321118  0.65551906  0.73537383  0.82617124]
NDCG3: [ 0.73900506  0.77407053  0.81578643  0.85946602  0.90641217]
NDCG4: [ 0.50302111  0.56935717  0.64339438  0.72516021  0.82046721]
Iteration 2 [101.0 s]: ranku_loss = 0.668154 [344.11 s],
NDCG1: [ 0.75113083  0.78754206  0.82864818  0.87005062  0.91204447]
NDCG2: [ 0.75210007  0.7879397   0.82765605  0.86822648  0.91188473]
NDCG3: [ 0.75109708  0.787468    0.82861075  0.87001962  0.91202308]
NDCG4: [ 0.75164612  0.78765752  0.82742054  0.86799165  0.91175362]
Iteration 3 [102.0 s]: ranku_loss = 0.645432 [343.92 s],
NDCG1: [ 0.75659699  0.79291443  0.83349309  0.87407325  0.91425303]
NDCG2: [ 0.75715362  0.79287144  0.83275098  0.87281792  0.9141145 ]
NDCG3: [ 0.75661263  0.79293231  0.83348674  0.87409571  0.91426113]
NDCG4: [ 0.75657426  0.79244398  0.83234485  0.87256774  0.91392749]
Iteration 4 [102.6 s]: ranku_loss = 0.639455 [340.02 s],
NDCG1: [ 0.75883682  0.79473746  0.83535184  0.87544828  0.91512566]
NDCG2: [ 0.75931751  0.79498992  0.83541822  0.87517698  0.91519909]
NDCG3: [ 0.7588901   0.79473129  0.83536025  0.8754737   0.91513508]
NDCG4: [ 0.759196    0.7947393   0.83530449  0.87509567  0.91513715]
Iteration 5 [101.8 s]: ranku_loss = 0.636695 [336.27 s],
NDCG1: [ 0.75948605  0.79564674  0.83604532  0.87614896  0.91547675]
NDCG2: [ 0.75905217  0.79559682  0.83574539  0.87598256  0.91536399]
NDCG3: [ 0.75950337  0.79559316  0.83605841  0.87615682  0.91547433]
NDCG4: [ 0.75976379  0.79558396  0.83594803  0.87602688  0.91549708]
Iteration 6 [102.1 s]: ranku_loss = 0.635335 [334.32 s],
NDCG1: [ 0.76043902  0.79629602  0.83659104  0.87674949  0.91577982]
NDCG2: [ 0.75941913  0.79535437  0.83610785  0.87630143  0.91545233]
NDCG3: [ 0.76042254  0.7962653   0.83657191  0.87676443  0.91577647]
NDCG4: [ 0.75933249  0.79524483  0.83603929  0.87626995  0.91541584]
Iteration 7 [101.9 s]: ranku_loss = 0.632905 [351.13 s],
NDCG1: [ 0.76048666  0.79668347  0.83673982  0.87693489  0.91586252]
NDCG2: [ 0.75843591  0.79529851  0.83593257  0.87626645  0.91529988]
NDCG3: [ 0.76038615  0.79664544  0.83674651  0.8768765   0.91584402]
NDCG4: [ 0.75932717  0.79564604  0.83622606  0.87650792  0.91551838]
Iteration 8 [106.7 s]: ranku_loss = 0.629380 [390.15 s],
NDCG1: [ 0.76027578  0.79632214  0.83684505  0.87677066  0.91579449]
NDCG2: [ 0.75857607  0.79527863  0.83615021  0.87643994  0.91533138]
NDCG3: [ 0.76024585  0.796239    0.83676629  0.87671373  0.9157638 ]
NDCG4: [ 0.75814844  0.79527916  0.83629382  0.8763148   0.91529313]
End. Best Model is model1.
Test_NDCG:
[ 0.7261327   0.71770518  0.71312576  0.71194754  0.71249559  0.71396167
  0.71639123  0.71937743  0.7225951   0.7263106 ]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [167.8 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [331.0], Init: 
Init_NDCG1: [ 0.60213807  0.65463479  0.71554089  0.78118807  0.85613261]
Init_NDCG2: [ 0.60770619  0.65980917  0.71815472  0.78312701  0.85789325]
Init_NDCG3: [ 0.60410493  0.65697739  0.71684489  0.78290848  0.85692606]
Init_NDCG4: [ 0.60651488  0.65849997  0.71763036  0.78305486  0.85754076]
Iteration 0 [81.4 s]: ranku_loss = 1.487041 [330.77 s],
NDCG1: [ 0.68413528  0.72232242  0.77043268  0.82392768  0.88484103]
NDCG2: [ 0.54435901  0.60147849  0.66662392  0.74092231  0.83338072]
NDCG3: [ 0.68425433  0.7223991   0.77053171  0.82392237  0.8848795 ]
NDCG4: [ 0.54445639  0.60127569  0.66658468  0.74076347  0.83334693]
Iteration 1 [97.8 s]: ranku_loss = 0.703833 [329.64 s],
NDCG1: [ 0.69907936  0.737583    0.78261683  0.83304161  0.89073733]
NDCG2: [ 0.53083108  0.58830394  0.65440365  0.73234337  0.82795692]
NDCG3: [ 0.69897813  0.73748575  0.78253046  0.83297991  0.89070744]
NDCG4: [ 0.53053227  0.5879991   0.65429958  0.73214813  0.82785263]
Iteration 2 [100.9 s]: ranku_loss = 0.697255 [330.84 s],
NDCG1: [ 0.70125091  0.74500881  0.79089182  0.839016    0.89349733]
NDCG2: [ 0.51544191  0.57488784  0.6451119   0.72695339  0.82297026]
NDCG3: [ 0.70083599  0.74491864  0.79072095  0.83893264  0.89340686]
NDCG4: [ 0.5152769   0.57468902  0.64485319  0.72671515  0.82287076]
Iteration 3 [102.0 s]: ranku_loss = 0.694831 [330.32 s],
NDCG1: [ 0.70952469  0.75283198  0.79801397  0.84506407  0.89676898]
NDCG2: [ 0.50329762  0.56577385  0.63770699  0.72133812  0.81906144]
NDCG3: [ 0.70946646  0.75263846  0.797805    0.84492204  0.89670742]
NDCG4: [ 0.50254626  0.56523342  0.6371599   0.72089062  0.81880236]
Iteration 4 [102.5 s]: ranku_loss = 0.693508 [329.75 s],
NDCG1: [ 0.713236    0.75760184  0.80341645  0.84897648  0.89885917]
NDCG2: [ 0.49501917  0.55875318  0.63340318  0.71822282  0.81649628]
NDCG3: [ 0.71279161  0.75723799  0.80321301  0.84884059  0.89871822]
NDCG4: [ 0.49468071  0.55838438  0.63296444  0.71788583  0.81632513]
Iteration 5 [102.9 s]: ranku_loss = 0.691567 [334.95 s],
NDCG1: [ 0.72903214  0.76775078  0.81179403  0.85624074  0.90369642]
NDCG2: [ 0.48830239  0.55518294  0.63043336  0.71493465  0.81463275]
NDCG3: [ 0.72864864  0.76748501  0.8116974   0.8561332   0.90360174]
NDCG4: [ 0.48706545  0.55395411  0.6294619   0.71402109  0.81415146]
Iteration 6 [103.5 s]: ranku_loss = 0.677474 [335.50 s],
NDCG1: [ 0.75185698  0.78787501  0.82823359  0.86972961  0.91209976]
NDCG2: [ 0.7447561   0.78578076  0.82696425  0.86801946  0.91064924]
NDCG3: [ 0.75198014  0.78786511  0.82822923  0.86972281  0.91210943]
NDCG4: [ 0.74385678  0.78531     0.82661638  0.86773424  0.9104189 ]
Iteration 7 [103.8 s]: ranku_loss = 0.642308 [342.08 s],
NDCG1: [ 0.75713597  0.79336741  0.83377751  0.87433449  0.91447499]
NDCG2: [ 0.7480577   0.78872176  0.8310378   0.87193253  0.91231465]
NDCG3: [ 0.7572933   0.79335421  0.83380275  0.87437944  0.91449674]
NDCG4: [ 0.74664844  0.78821696  0.83060743  0.8715803   0.91201262]
Iteration 8 [102.6 s]: ranku_loss = 0.639674 [329.86 s],
NDCG1: [ 0.75801632  0.79493255  0.83532115  0.87551954  0.91506096]
NDCG2: [ 0.75142395  0.79168947  0.83327312  0.87392595  0.91351062]
NDCG3: [ 0.75835152  0.79501276  0.83532355  0.87558075  0.91511679]
NDCG4: [ 0.74826116  0.79020721  0.83238548  0.87320356  0.91281251]
Iteration 9 [103.0 s]: ranku_loss = 0.636188 [338.28 s],
NDCG1: [ 0.75870465  0.79604071  0.83612197  0.8763114   0.91544574]
NDCG2: [ 0.75531228  0.79376248  0.83483534  0.87545478  0.91452948]
NDCG3: [ 0.75870758  0.79587677  0.8360951   0.87625979  0.91541946]
NDCG4: [ 0.7487012   0.79094888  0.83319489  0.87385067  0.91306862]
Iteration 10 [103.9 s]: ranku_loss = 0.634312 [340.24 s],
NDCG1: [ 0.75940104  0.79590692  0.83650034  0.87668014  0.91558038]
NDCG2: [ 0.7572754   0.79526011  0.83587163  0.87635278  0.9151585 ]
NDCG3: [ 0.75952472  0.79588265  0.83646498  0.87669079  0.9155888 ]
NDCG4: [ 0.75215381  0.79323175  0.83437984  0.87508645  0.91402637]
Iteration 11 [103.1 s]: ranku_loss = 0.634018 [336.39 s],
NDCG1: [ 0.75965818  0.79654106  0.83706738  0.87697903  0.91578478]
NDCG2: [ 0.75853542  0.79623191  0.83654746  0.8767965   0.9155329 ]
NDCG3: [ 0.75948874  0.79645403  0.8370283   0.87693486  0.91574209]
NDCG4: [ 0.75595822  0.79512618  0.83598583  0.87619934  0.91497001]
Iteration 12 [102.5 s]: ranku_loss = 0.630623 [339.92 s],
NDCG1: [ 0.76015088  0.7966996   0.83704916  0.87711329  0.91588557]
NDCG2: [ 0.75908884  0.79617282  0.83667877  0.87689429  0.91563327]
NDCG3: [ 0.75999335  0.79658109  0.83697666  0.87701998  0.91583487]
NDCG4: [ 0.75777948  0.79582212  0.83647116  0.87665283  0.91537788]
Iteration 13 [102.9 s]: ranku_loss = 0.628972 [340.83 s],
NDCG1: [ 0.76121099  0.79698883  0.8371275   0.87744571  0.91606237]
NDCG2: [ 0.75830905  0.79568637  0.83614013  0.87669378  0.91537267]
NDCG3: [ 0.76097682  0.79679325  0.83704695  0.87742429  0.91599788]
NDCG4: [ 0.7571516   0.79507984  0.83586036  0.87645754  0.91510179]
Iteration 14 [103.4 s]: ranku_loss = 0.624678 [341.61 s],
NDCG1: [ 0.76062659  0.79708943  0.83747372  0.87752221  0.91607595]
NDCG2: [ 0.75418397  0.79341472  0.83483868  0.87568872  0.91441172]
NDCG3: [ 0.76106039  0.79726895  0.83759689  0.87762836  0.91616498]
NDCG4: [ 0.75212666  0.79220249  0.83394124  0.87507479  0.9138251 ]
Iteration 15 [103.1 s]: ranku_loss = 0.621831 [338.14 s],
NDCG1: [ 0.76123628  0.79743471  0.83801097  0.87770819  0.91627228]
NDCG2: [ 0.75343957  0.79236119  0.83412696  0.8749394   0.91401477]
NDCG3: [ 0.76134292  0.79742996  0.83792025  0.87771719  0.9162846 ]
NDCG4: [ 0.75060913  0.79124303  0.83310158  0.8742375   0.91336164]
Iteration 16 [101.9 s]: ranku_loss = 0.620300 [349.64 s],
NDCG1: [ 0.76067387  0.79759871  0.83772724  0.87747969  0.9161681 ]
NDCG2: [ 0.7489943   0.78834466  0.83114852  0.87272056  0.91241856]
NDCG3: [ 0.76064291  0.79749655  0.83783389  0.87742149  0.91615738]
NDCG4: [ 0.74498596  0.78693648  0.82965351  0.87160825  0.9115009 ]
End. Best Model is model3.
Test_NDCG:
[ 0.72368543  0.71706619  0.71392804  0.7127947   0.7130509   0.71463292
  0.71709984  0.71983019  0.72312795  0.72677784]
Test_NDCG By model1:
[ 0.72121363  0.71546702  0.71314699  0.71223     0.71270727  0.71437612
  0.71675155  0.71962617  0.72293778  0.72657215]

