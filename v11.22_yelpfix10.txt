liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.22_single/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [6.5 s]. #user=13679, #item=12922, #train_user=273580, #cv=68395, #test=503353
Time: [35.9], Init: 
Init_NDCG1: [ 0.61812243  0.65782889  0.71136193  0.77693639  0.8567704 ]
Init_NDCG2: [ 0.62237055  0.65975895  0.71366938  0.77849357  0.85789533]
Init_NDCG3: [ 0.61812243  0.65782889  0.71136193  0.77693639  0.8567704 ]
Init_NDCG4: [ 0.62237055  0.65975895  0.71366938  0.77849357  0.85789533]
Iteration 0 [27.8 s]: ranku_loss = 2.025993 [33.75 s],
NDCG1: [ 0.59584698  0.63477994  0.69222079  0.76189573  0.84805841]
NDCG2: [ 0.65127062  0.68648158  0.73520716  0.79387107  0.86833839]
NDCG3: [ 0.59584698  0.63477994  0.69222079  0.76189573  0.84805841]
NDCG4: [ 0.65127062  0.68648158  0.73520716  0.79387107  0.86833839]
Iteration 1 [19.7 s]: ranku_loss = 0.696197 [30.48 s],
NDCG1: [ 0.56700691  0.61027363  0.66995212  0.74437612  0.83741362]
NDCG2: [ 0.68246904  0.71363302  0.7573162   0.81128077  0.87966288]
NDCG3: [ 0.56700691  0.61027363  0.66995212  0.74437612  0.83741362]
NDCG4: [ 0.68246904  0.71363302  0.7573162   0.81128077  0.87966288]
Iteration 2 [19.5 s]: ranku_loss = 0.681746 [30.51 s],
NDCG1: [ 0.55318704  0.59697616  0.65851445  0.73502253  0.83194934]
NDCG2: [ 0.69960911  0.72795923  0.76959679  0.82061608  0.88586743]
NDCG3: [ 0.55318704  0.59697616  0.65851445  0.73502253  0.83194934]
NDCG4: [ 0.69960911  0.72795923  0.76959679  0.82061608  0.88586743]
Iteration 3 [19.8 s]: ranku_loss = 0.673965 [30.32 s],
NDCG1: [ 0.69368311  0.7211458   0.76381621  0.81671797  0.883372  ]
NDCG2: [ 0.7068337   0.73416215  0.77440557  0.82516613  0.88850756]
NDCG3: [ 0.69368311  0.7211458   0.76381621  0.81671797  0.883372  ]
NDCG4: [ 0.7068337   0.73416215  0.77440557  0.82516613  0.88850756]
Iteration 4 [19.6 s]: ranku_loss = 0.669286 [30.35 s],
NDCG1: [ 0.71240637  0.73756536  0.77762942  0.82859269  0.89023665]
NDCG2: [ 0.71232148  0.73744067  0.77777522  0.82858763  0.89023731]
NDCG3: [ 0.71240637  0.73756536  0.77762942  0.82859269  0.89023665]
NDCG4: [ 0.71232148  0.73744067  0.77777522  0.82858763  0.89023731]
Iteration 5 [19.5 s]: ranku_loss = 0.665086 [30.34 s],
NDCG1: [ 0.71477609  0.74095816  0.78172466  0.83209724  0.89176086]
NDCG2: [ 0.71476225  0.74070968  0.78165012  0.83202502  0.89172017]
NDCG3: [ 0.71477609  0.74095816  0.78172466  0.83209724  0.89176086]
NDCG4: [ 0.71476225  0.74070968  0.78165012  0.83202502  0.89172017]
Iteration 6 [19.6 s]: ranku_loss = 0.659459 [30.40 s],
NDCG1: [ 0.71373668  0.74140636  0.78372549  0.83422798  0.89212875]
NDCG2: [ 0.71393629  0.7415607   0.78373016  0.8341528   0.89214451]
NDCG3: [ 0.71373668  0.74140636  0.78372549  0.83422798  0.89212875]
NDCG4: [ 0.71393629  0.7415607   0.78373016  0.8341528   0.89214451]
Iteration 7 [19.6 s]: ranku_loss = 0.643074 [30.37 s],
NDCG1: [ 0.70073759  0.73704967  0.78179801  0.83264867  0.88980964]
NDCG2: [ 0.71743198  0.74546254  0.78640083  0.83662862  0.89362756]
NDCG3: [ 0.70073759  0.73704967  0.78179801  0.83264867  0.88980964]
NDCG4: [ 0.71743198  0.74546254  0.78640083  0.83662862  0.89362756]
Iteration 8 [19.6 s]: ranku_loss = 0.614735 [30.45 s],
NDCG1: [ 0.72001232  0.7472398   0.78833845  0.83789714  0.89451892]
NDCG2: [ 0.71838016  0.74651145  0.78759167  0.83733232  0.89413481]
NDCG3: [ 0.72001232  0.7472398   0.78833845  0.83789714  0.89451892]
NDCG4: [ 0.71838016  0.74651145  0.78759167  0.83733232  0.89413481]
Iteration 9 [19.7 s]: ranku_loss = 0.588127 [30.42 s],
NDCG1: [ 0.71577759  0.7440306   0.78487397  0.83512257  0.89302251]
NDCG2: [ 0.71845563  0.7463451   0.78699489  0.83706583  0.8939796 ]
NDCG3: [ 0.71577759  0.7440306   0.78487397  0.83512257  0.89302251]
NDCG4: [ 0.71845563  0.7463451   0.78699489  0.83706583  0.8939796 ]
End. Best Model is model1.
Test_NDCG:
[ 0.68199304  0.68533292  0.68525438  0.68845013  0.69300489  0.69968837
  0.70724584  0.71669756  0.72722235  0.73876426]

liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.22_single/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [6.7 s]. #user=13679, #item=12922, #train_user=273580, #cv=68395, #test=503353
Time: [35.5], Init: 
Init_NDCG1: [ 0.61691305  0.6579681   0.71170335  0.77636513  0.85664357]
Init_NDCG2: [ 0.62237491  0.66016475  0.71252963  0.77688828  0.85775757]
Init_NDCG3: [ 0.61691305  0.6579681   0.71170335  0.77636513  0.85664357]
Init_NDCG4: [ 0.62237491  0.66016475  0.71252963  0.77688828  0.85775757]
Iteration 0 [44.7 s]: ranku_loss = 1.997832 [33.31 s],
NDCG1: [ 0.63584734  0.67253415  0.7221062   0.78452346  0.86288513]
NDCG2: [ 0.61565583  0.65325668  0.70476208  0.77146018  0.85444872]
NDCG3: [ 0.63584734  0.67253415  0.7221062   0.78452346  0.86288513]
NDCG4: [ 0.61565583  0.65325668  0.70476208  0.77146018  0.85444872]
Iteration 1 [40.2 s]: ranku_loss = 0.708541 [33.26 s],
NDCG1: [ 0.60321189  0.6396638   0.69538834  0.76378755  0.84996411]
NDCG2: [ 0.65279026  0.68509675  0.73354424  0.79212827  0.86794418]
NDCG3: [ 0.60321189  0.6396638   0.69538834  0.76378755  0.84996411]
NDCG4: [ 0.65279026  0.68509675  0.73354424  0.79212827  0.86794418]
Iteration 2 [40.4 s]: ranku_loss = 0.695087 [33.56 s],
NDCG1: [ 0.56736967  0.61118644  0.67034914  0.74495174  0.83762721]
NDCG2: [ 0.6817547   0.71357499  0.75699829  0.81125683  0.8794876 ]
NDCG3: [ 0.56736967  0.61118644  0.67034914  0.74495174  0.83762721]
NDCG4: [ 0.6817547   0.71357499  0.75699829  0.81125683  0.8794876 ]
Iteration 3 [40.7 s]: ranku_loss = 0.686524 [33.83 s],
NDCG1: [ 0.54975289  0.5972854   0.65904027  0.73495922  0.83160182]
NDCG2: [ 0.70135648  0.72820109  0.77028065  0.82284937  0.88635692]
NDCG3: [ 0.54975289  0.5972854   0.65904027  0.73495922  0.83160182]
NDCG4: [ 0.70135648  0.72820109  0.77028065  0.82284937  0.88635692]
Iteration 4 [40.0 s]: ranku_loss = 0.675452 [33.43 s],
NDCG1: [ 0.72162543  0.74497794  0.78597069  0.83592988  0.89402662]
NDCG2: [ 0.70859194  0.73536134  0.77673459  0.82791967  0.88938889]
NDCG3: [ 0.72162543  0.74497794  0.78597069  0.83592988  0.89402662]
NDCG4: [ 0.70859194  0.73536134  0.77673459  0.82791967  0.88938889]
Iteration 5 [40.6 s]: ranku_loss = 0.655619 [33.70 s],
NDCG1: [ 0.7109812   0.74181576  0.78541229  0.83571827  0.89248639]
NDCG2: [ 0.70634957  0.73972227  0.78350395  0.83368996  0.89100148]
NDCG3: [ 0.7109812   0.74181576  0.78541229  0.83571827  0.89248639]
NDCG4: [ 0.70634957  0.73972227  0.78350395  0.83368996  0.89100148]
End. Best Model is model1.
Test_NDCG:
[ 0.6655899   0.66673373  0.66955579  0.67549415  0.68084166  0.68899286
  0.69796058  0.70808974  0.71915885  0.73144976]

liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.22_single/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [6.0 s]. #user=13679, #item=12922, #train_user=273580, #cv=68395, #test=503353
Time: [33.5], Init: 
Init_NDCG1: [ 0.62148543  0.65883814  0.71347405  0.77846258  0.85742745]
Init_NDCG2: [ 0.61313572  0.65695306  0.71083835  0.77625509  0.85606591]
Init_NDCG3: [ 0.62148543  0.65883814  0.71347405  0.77846258  0.85742745]
Init_NDCG4: [ 0.61313572  0.65695306  0.71083835  0.77625509  0.85606591]
Iteration 0 [45.3 s]: ranku_loss = 2.005793 [32.84 s],
NDCG1: [ 0.66328756  0.69389328  0.74014504  0.79899897  0.87212349]
NDCG2: [ 0.59234927  0.63345314  0.6879222   0.75749114  0.84602652]
NDCG3: [ 0.66328756  0.69389328  0.74014504  0.79899897  0.87212349]
NDCG4: [ 0.59234927  0.63345314  0.6879222   0.75749114  0.84602652]
Iteration 1 [40.4 s]: ranku_loss = 0.712260 [32.32 s],
NDCG1: [ 0.67639849  0.70416516  0.74991406  0.80571024  0.87673691]
NDCG2: [ 0.58624633  0.62662951  0.68304735  0.7529272   0.84348401]
NDCG3: [ 0.67639849  0.70416516  0.74991406  0.80571024  0.87673691]
NDCG4: [ 0.58624633  0.62662951  0.68304735  0.7529272   0.84348401]
Iteration 2 [24.3 s]: ranku_loss = 0.698636 [32.58 s],
NDCG1: [ 0.71048328  0.7318304   0.77176508  0.82285638  0.88840394]
NDCG2: [ 0.66792512  0.70559855  0.75423729  0.81142118  0.87652528]
NDCG3: [ 0.71048328  0.7318304   0.77176508  0.82285638  0.88840394]
NDCG4: [ 0.66792512  0.70559855  0.75423729  0.81142118  0.87652528]
Iteration 3 [19.9 s]: ranku_loss = 0.647780 [30.92 s],
NDCG1: [ 0.73311831  0.75624119  0.79414185  0.84053982  0.89830629]
NDCG2: [ 0.7330521   0.75574512  0.79403996  0.84124694  0.89818975]
NDCG3: [ 0.73311831  0.75624119  0.79414185  0.84053982  0.89830629]
NDCG4: [ 0.7330521   0.75574512  0.79403996  0.84124694  0.89818975]
Iteration 4 [19.5 s]: ranku_loss = 0.613927 [31.01 s],
NDCG1: [ 0.73315281  0.75707055  0.79520968  0.84142566  0.8985964 ]
NDCG2: [ 0.72954419  0.75338688  0.79293024  0.84122     0.89729499]
NDCG3: [ 0.73315281  0.75707055  0.79520968  0.84142566  0.8985964 ]
NDCG4: [ 0.72954419  0.75338688  0.79293024  0.84122     0.89729499]
Iteration 5 [19.5 s]: ranku_loss = 0.597771 [30.85 s],
NDCG1: [ 0.73209862  0.75572628  0.79479014  0.84161242  0.89826752]
NDCG2: [ 0.72811943  0.75207777  0.79286127  0.84086305  0.89695149]
NDCG3: [ 0.73209862  0.75572628  0.79479014  0.84161242  0.89826752]
NDCG4: [ 0.72811943  0.75207777  0.79286127  0.84086305  0.89695149]
End. Best Model is model1.
Test_NDCG:
[ 0.725954    0.71681632  0.71275623  0.71375589  0.71612698  0.72119343
  0.72705995  0.73527684  0.74454499  0.75530184]

liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.22_single/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [6.3 s]. #user=13679, #item=12922, #train_user=273580, #cv=68395, #test=503353
Time: [36.3], Init: 
Init_NDCG1: [ 0.61931798  0.65958166  0.71247888  0.7774073   0.85748295]
Init_NDCG2: [ 0.62222102  0.66122171  0.71416869  0.77823298  0.85827869]
Init_NDCG3: [ 0.61931798  0.65958166  0.71247888  0.7774073   0.85748295]
Init_NDCG4: [ 0.62222102  0.66122171  0.71416869  0.77823298  0.85827869]
Iteration 0 [24.3 s]: ranku_loss = 2.092604 [33.06 s],
NDCG1: [ 0.60363615  0.64422311  0.69959049  0.76678019  0.85141728]
NDCG2: [ 0.65035056  0.68358251  0.73282397  0.79260217  0.86741846]
NDCG3: [ 0.60363615  0.64422311  0.69959049  0.76678019  0.85141728]
NDCG4: [ 0.65035056  0.68358251  0.73282397  0.79260217  0.86741846]
Iteration 1 [20.2 s]: ranku_loss = 0.704653 [32.80 s],
NDCG1: [ 0.58202863  0.62452631  0.68248801  0.75348684  0.8431547 ]
NDCG2: [ 0.67891146  0.709777    0.75528796  0.81068943  0.87849306]
NDCG3: [ 0.58202863  0.62452631  0.68248801  0.75348684  0.8431547 ]
NDCG4: [ 0.67891146  0.709777    0.75528796  0.81068943  0.87849306]
Iteration 2 [20.1 s]: ranku_loss = 0.673950 [32.98 s],
NDCG1: [ 0.72598706  0.74969118  0.79069602  0.839153    0.89615961]
NDCG2: [ 0.71078823  0.73835813  0.78082281  0.83053996  0.8907778 ]
NDCG3: [ 0.72598706  0.74969118  0.79069602  0.839153    0.89615961]
NDCG4: [ 0.71078823  0.73835813  0.78082281  0.83053996  0.8907778 ]
Iteration 3 [20.2 s]: ranku_loss = 0.627713 [32.77 s],
NDCG1: [ 0.73361636  0.75473046  0.79428297  0.84186839  0.89835061]
NDCG2: [ 0.71624959  0.7458937   0.78815952  0.83689554  0.89385964]
NDCG3: [ 0.73361636  0.75473046  0.79428297  0.84186839  0.89835061]
NDCG4: [ 0.71624959  0.7458937   0.78815952  0.83689554  0.89385964]
Iteration 4 [20.1 s]: ranku_loss = 0.610991 [33.09 s],
NDCG1: [ 0.73388372  0.75485119  0.79442     0.84184557  0.89837635]
NDCG2: [ 0.71732835  0.74652592  0.78922562  0.83798614  0.89421836]
NDCG3: [ 0.73388372  0.75485119  0.79442     0.84184557  0.89837635]
NDCG4: [ 0.71732835  0.74652592  0.78922562  0.83798614  0.89421836]
Iteration 5 [23.1 s]: ranku_loss = 0.601557 [34.17 s],
NDCG1: [ 0.72961817  0.75361095  0.79350072  0.84097594  0.89746917]
NDCG2: [ 0.7186786   0.7468257   0.78910413  0.83826993  0.89444504]
NDCG3: [ 0.72961817  0.75361095  0.79350072  0.84097594  0.89746917]
NDCG4: [ 0.7186786   0.7468257   0.78910413  0.83826993  0.89444504]
End. Best Model is model1.
Test_NDCG:
[ 0.71894852  0.71050391  0.70801418  0.70791436  0.71172824  0.71708689
  0.72369882  0.73210639  0.74155737  0.75241635]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.22_single/MLP.py --learner adam --lr 0.0001 --path Data/yelpfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/yelpfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [5.9 s]. #user=13679, #item=12922, #train_user=273580, #cv=68395, #test=503353
Time: [34.1], Init: 
Init_NDCG1: [ 0.61920308  0.65922154  0.71318777  0.77738719  0.85743157]
Init_NDCG2: [ 0.62319099  0.66147363  0.71403878  0.77896483  0.85832322]
Init_NDCG3: [ 0.61920308  0.65922154  0.71318777  0.77738719  0.85743157]
Init_NDCG4: [ 0.62319099  0.66147363  0.71403878  0.77896483  0.85832322]
Iteration 0 [24.0 s]: ranku_loss = 1.988344 [33.57 s],
NDCG1: [ 0.65923597  0.69065457  0.73750376  0.79630478  0.87078184]
NDCG2: [ 0.59774015  0.63617309  0.69050379  0.75937745  0.84740436]
NDCG3: [ 0.65923597  0.69065457  0.73750376  0.79630478  0.87078184]
NDCG4: [ 0.59774015  0.63617309  0.69050379  0.75937745  0.84740436]
Iteration 1 [22.3 s]: ranku_loss = 0.715325 [33.89 s],
NDCG1: [ 0.66594467  0.69696866  0.74278616  0.80030585  0.87340572]
NDCG2: [ 0.59101865  0.63013523  0.68529712  0.75535974  0.84494663]
NDCG3: [ 0.66594467  0.69696866  0.74278616  0.80030585  0.87340572]
NDCG4: [ 0.59101865  0.63013523  0.68529712  0.75535974  0.84494663]
Iteration 2 [40.9 s]: ranku_loss = 0.706591 [33.43 s],
NDCG1: [ 0.67591104  0.70446233  0.7480409   0.80522572  0.87646513]
NDCG2: [ 0.58244408  0.62444438  0.67944469  0.75053292  0.84211504]
NDCG3: [ 0.67591104  0.70446233  0.7480409   0.80522572  0.87646513]
NDCG4: [ 0.58244408  0.62444438  0.67944469  0.75053292  0.84211504]
Iteration 3 [40.0 s]: ranku_loss = 0.703365 [33.41 s],
NDCG1: [ 0.68582364  0.71434949  0.75531431  0.81070797  0.88022533]
NDCG2: [ 0.57387912  0.61674225  0.67172098  0.74512593  0.83883511]
NDCG3: [ 0.68582364  0.71434949  0.75531431  0.81070797  0.88022533]
NDCG4: [ 0.57387912  0.61674225  0.67172098  0.74512593  0.83883511]
Iteration 4 [40.0 s]: ranku_loss = 0.700629 [33.83 s],
NDCG1: [ 0.69691975  0.72326034  0.76313038  0.81623999  0.88405993]
NDCG2: [ 0.56590187  0.60822005  0.66478745  0.73945269  0.83556798]
NDCG3: [ 0.69691975  0.72326034  0.76313038  0.81623999  0.88405993]
NDCG4: [ 0.56590187  0.60822005  0.66478745  0.73945269  0.83556798]
Iteration 5 [40.6 s]: ranku_loss = 0.697953 [33.81 s],
NDCG1: [ 0.71007519  0.7336329   0.7717753   0.82349676  0.88851643]
NDCG2: [ 0.55240775  0.59796735  0.65607431  0.7322072   0.83112286]
NDCG3: [ 0.71007519  0.7336329   0.7717753   0.82349676  0.88851643]
NDCG4: [ 0.55240775  0.59796735  0.65607431  0.7322072   0.83112286]
Iteration 6 [40.1 s]: ranku_loss = 0.695687 [33.53 s],
NDCG1: [ 0.71554298  0.73907489  0.77997812  0.82875937  0.89125264]
NDCG2: [ 0.53997369  0.58565246  0.6490052   0.72676591  0.82686492]
NDCG3: [ 0.71554298  0.73907489  0.77997812  0.82875937  0.89125264]
NDCG4: [ 0.53997369  0.58565246  0.6490052   0.72676591  0.82686492]
Iteration 7 [41.3 s]: ranku_loss = 0.693941 [33.61 s],
NDCG1: [ 0.72233595  0.7441216   0.78537257  0.83324435  0.89378839]
NDCG2: [ 0.53065473  0.57837723  0.64405244  0.72221158  0.82392433]
NDCG3: [ 0.72233595  0.7441216   0.78537257  0.83324435  0.89378839]
NDCG4: [ 0.53065473  0.57837723  0.64405244  0.72221158  0.82392433]
Iteration 8 [24.5 s]: ranku_loss = 0.692279 [33.82 s],
NDCG1: [ 0.72480642  0.74808412  0.78904577  0.8355445   0.89523159]
NDCG2: [ 0.52657511  0.57382781  0.64051614  0.71998451  0.82237946]
NDCG3: [ 0.72480642  0.74808412  0.78904577  0.8355445   0.89523159]
NDCG4: [ 0.52657511  0.57382781  0.64051614  0.71998451  0.82237946]
Iteration 9 [19.9 s]: ranku_loss = 0.686021 [32.44 s],
NDCG1: [ 0.72936879  0.75315473  0.79172629  0.83878004  0.89702209]
NDCG2: [ 0.71779973  0.74434011  0.78541592  0.83459762  0.89329795]
NDCG3: [ 0.72936879  0.75315473  0.79172629  0.83878004  0.89702209]
NDCG4: [ 0.71779973  0.74434011  0.78541592  0.83459762  0.89329795]
Iteration 10 [19.8 s]: ranku_loss = 0.643573 [32.42 s],
NDCG1: [ 0.73122881  0.7543626   0.79233655  0.83949596  0.89751528]
NDCG2: [ 0.72857382  0.7509288   0.78670453  0.83414789  0.89553496]
NDCG3: [ 0.73122881  0.7543626   0.79233655  0.83949596  0.89751528]
NDCG4: [ 0.72857382  0.7509288   0.78670453  0.83414789  0.89553496]
Iteration 11 [19.8 s]: ranku_loss = 0.622179 [32.81 s],
NDCG1: [ 0.72835076  0.7534788   0.79194576  0.83912641  0.89690847]
NDCG2: [ 0.72629291  0.74983462  0.78660784  0.83354892  0.8950163 ]
NDCG3: [ 0.72835076  0.7534788   0.79194576  0.83912641  0.89690847]
NDCG4: [ 0.72629291  0.74983462  0.78660784  0.83354892  0.8950163 ]
End. Best Model is model1.
Test_NDCG:
[ 0.71715973  0.71031     0.70749307  0.70856446  0.71168668  0.7164785
  0.72309287  0.73123202  0.74089525  0.75152909]


