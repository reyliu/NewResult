liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [28.0 s]. #user=28881, #item=30133, #train_user=577620, #train_item=1803518, #cv=144405, #test=1277634
Time: [115.6], Init: 
Init_NDCG1: [ 0.72339376  0.74929827  0.78568148  0.83458184  0.89883664]
Init_NDCG2: [ 0.72581984  0.7492001   0.78553561  0.83366693  0.89898126]
Init_NDCG3: [ 0.72653597  0.75060241  0.78643905  0.83441028  0.89947412]
Init_NDCG4: [ 0.72511079  0.74954497  0.7856443   0.83419406  0.89902634]
Iteration 0 [110.3 s]: ranku_loss = 1.450647 [117.71 s],
NDCG1: [ 0.74993953  0.76910809  0.80148928  0.84632168  0.90685566]
NDCG2: [ 0.70645529  0.73391034  0.77235119  0.82358162  0.89288772]
NDCG3: [ 0.74964671  0.76896539  0.80145209  0.84621994  0.9067941 ]
NDCG4: [ 0.70592025  0.73382779  0.77220901  0.82355899  0.89279552]
Iteration 1 [77.7 s]: ranku_loss = 0.703839 [100.49 s],
NDCG1: [ 0.7545842   0.77279112  0.80457334  0.84898205  0.90843811]
NDCG2: [ 0.70810922  0.73550636  0.77459127  0.82618941  0.89374376]
NDCG3: [ 0.75425165  0.7725737   0.80439842  0.84874988  0.90833125]
NDCG4: [ 0.70718506  0.73513023  0.77435012  0.82594027  0.89352612]
Iteration 2 [73.5 s]: ranku_loss = 0.689397 [120.11 s],
NDCG1: [ 0.78180928  0.79591245  0.82409178  0.86371165  0.91768503]
NDCG2: [ 0.77796746  0.79635693  0.82536441  0.86539692  0.9177251 ]
NDCG3: [ 0.78207053  0.79606447  0.82420827  0.86381459  0.91776746]
NDCG4: [ 0.77801895  0.79608578  0.82530839  0.86525168  0.9176671 ]
Iteration 3 [110.4 s]: ranku_loss = 0.646420 [117.09 s],
NDCG1: [ 0.791821    0.80507093  0.83210374  0.87108186  0.92155994]
NDCG2: [ 0.78680472  0.80260486  0.83097313  0.87046964  0.92060682]
NDCG3: [ 0.79160148  0.80518018  0.83209708  0.87109287  0.92155142]
NDCG4: [ 0.78748269  0.80296083  0.83128934  0.87063288  0.9207733 ]
Iteration 4 [107.5 s]: ranku_loss = 0.625487 [111.23 s],
NDCG1: [ 0.79079495  0.80504045  0.83271856  0.87098276  0.92151908]
NDCG2: [ 0.78733119  0.80308268  0.83186421  0.87088048  0.9208615 ]
NDCG3: [ 0.79082876  0.80503966  0.83272965  0.8710075   0.92152902]
NDCG4: [ 0.78734987  0.80318402  0.83192792  0.87084962  0.92086231]
End. Best Model is model3.
Test_NDCG:
[ 0.80207442  0.79457201  0.79083952  0.78933378  0.7895506   0.79138515
  0.79460369  0.79928391  0.80480047  0.81172426]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [27.6 s]. #user=28881, #item=30133, #train_user=577620, #train_item=1803518, #cv=144405, #test=1277634
Time: [99.4], Init: 
Init_NDCG1: [ 0.72632488  0.75115633  0.78714518  0.83527096  0.8995983 ]
Init_NDCG2: [ 0.72236514  0.74780281  0.7838961   0.83319407  0.89828698]
Init_NDCG3: [ 0.72447837  0.74926514  0.78584019  0.83458594  0.89892521]
Init_NDCG4: [ 0.72491336  0.75094333  0.7870243   0.83583527  0.8996001 ]
Iteration 0 [71.0 s]: ranku_loss = 1.404734 [97.51 s],
NDCG1: [ 0.74695225  0.76724632  0.80021575  0.84536053  0.90607782]
NDCG2: [ 0.70619293  0.73347475  0.77256816  0.82380571  0.89287503]
NDCG3: [ 0.74738493  0.76710531  0.80029297  0.8454656   0.90613048]
NDCG4: [ 0.70575169  0.73313408  0.77230363  0.82366601  0.89274706]
Iteration 1 [65.4 s]: ranku_loss = 0.702702 [100.52 s],
NDCG1: [ 0.74980174  0.76936506  0.80159828  0.84670908  0.90684862]
NDCG2: [ 0.70379465  0.73224486  0.77105845  0.82307161  0.89218209]
NDCG3: [ 0.74969421  0.76924054  0.80150797  0.84666273  0.90681196]
NDCG4: [ 0.7030909   0.73160068  0.77046943  0.82248196  0.89191092]
Iteration 2 [66.3 s]: ranku_loss = 0.696804 [97.92 s],
NDCG1: [ 0.75278752  0.77086963  0.80439893  0.8483114   0.90785846]
NDCG2: [ 0.70358871  0.73118838  0.770887    0.82243119  0.89191965]
NDCG3: [ 0.75251171  0.77097403  0.80421992  0.84808765  0.90779173]
NDCG4: [ 0.70075048  0.72898402  0.76938051  0.82114068  0.89105729]
Iteration 3 [65.9 s]: ranku_loss = 0.693819 [97.62 s],
NDCG1: [ 0.75911545  0.77622619  0.80701223  0.85126549  0.9097755 ]
NDCG2: [ 0.70582885  0.7344728   0.7730115   0.82473776  0.89297603]
NDCG3: [ 0.75953131  0.77639922  0.80709834  0.85141293  0.90985984]
NDCG4: [ 0.69814631  0.72864487  0.76840668  0.82056076  0.89055283]
Iteration 4 [65.9 s]: ranku_loss = 0.690905 [98.04 s],
NDCG1: [ 0.7787143   0.79166123  0.82034723  0.86130152  0.91621784]
NDCG2: [ 0.77550509  0.7933824   0.82274291  0.86355899  0.91666552]
NDCG3: [ 0.77829869  0.79121729  0.8199115   0.86099379  0.91604973]
NDCG4: [ 0.76638528  0.78609256  0.81731176  0.85879369  0.91368456]
Iteration 5 [67.1 s]: ranku_loss = 0.668010 [103.86 s],
NDCG1: [ 0.78840651  0.80390093  0.83107547  0.86965962  0.92077321]
NDCG2: [ 0.77875657  0.79978259  0.8285795   0.86779316  0.91878785]
NDCG3: [ 0.78850673  0.80385914  0.83110363  0.86968649  0.92078715]
NDCG4: [ 0.777159    0.79859077  0.8279748   0.86733345  0.91834098]
Iteration 6 [69.6 s]: ranku_loss = 0.629195 [108.23 s],
NDCG1: [ 0.79094881  0.80535861  0.83253719  0.87129397  0.92157827]
NDCG2: [ 0.78908047  0.80507193  0.83226445  0.87094726  0.92128365]
NDCG3: [ 0.79084459  0.80539819  0.83254417  0.87122269  0.92156776]
NDCG4: [ 0.78926033  0.80487529  0.83219149  0.87101441  0.92129151]
Iteration 7 [75.2 s]: ranku_loss = 0.612302 [110.42 s],
NDCG1: [ 0.79107908  0.8055548   0.83312127  0.87121239  0.92168324]
NDCG2: [ 0.78928701  0.80488668  0.83267143  0.87091449  0.9213139 ]
NDCG3: [ 0.79120819  0.80559415  0.83322971  0.87130555  0.92172274]
NDCG4: [ 0.79069792  0.80509997  0.83291873  0.87127754  0.92156763]
Iteration 8 [79.1 s]: ranku_loss = 0.590822 [117.93 s],
NDCG1: [ 0.79098628  0.8057277   0.83328806  0.87129352  0.92170562]
NDCG2: [ 0.78956999  0.80514032  0.832899    0.87106918  0.92140709]
NDCG3: [ 0.79121219  0.80578853  0.83336569  0.87130692  0.92174363]
NDCG4: [ 0.78981869  0.80508978  0.83281046  0.87103487  0.92141414]
Iteration 9 [82.6 s]: ranku_loss = 0.577622 [123.07 s],
NDCG1: [ 0.79055859  0.80574055  0.83318295  0.870787    0.92161698]
NDCG2: [ 0.78829096  0.8045616   0.83230575  0.87060571  0.92112479]
NDCG3: [ 0.79050364  0.80578475  0.8330312   0.87072311  0.92158712]
NDCG4: [ 0.78846559  0.80443556  0.83219962  0.87070913  0.92110956]
End. Best Model is model1.
Test_NDCG:
[ 0.79584822  0.78946986  0.78596325  0.78430235  0.78536806  0.7875226
  0.79103802  0.79581185  0.8016916   0.80893016]

