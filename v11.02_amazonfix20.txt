liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [34.6 s]. #user=16834, #item=30133, #train_user=3535140, #cv=84170, #test=944442
Time: [52.7], Init: 
Init_NDCG1: [ 0.72063535  0.74615829  0.78317491  0.83274304  0.89789082]
Init_NDCG2: [ 0.71774364  0.74569891  0.78260975  0.83160511  0.89738139]
Init_NDCG3: [ 0.71976544  0.74739734  0.78484155  0.83283706  0.89807524]
Init_NDCG4: [ 0.7198729   0.74554592  0.78229902  0.83184352  0.89747749]
Iteration 0 [272.2 s]: ranku_loss = 0.980946 [47.44 s],
NDCG1: [ 0.75054015  0.7727116   0.80595613  0.8502239   0.90839524]
NDCG2: [ 0.68640194  0.71951295  0.76151203  0.81604652  0.88726944]
NDCG3: [ 0.74985567  0.77253777  0.80542401  0.84996736  0.90823072]
NDCG4: [ 0.68701689  0.7193478   0.76138644  0.81609933  0.88729496]
Iteration 1 [252.6 s]: ranku_loss = 0.694259 [42.58 s],
NDCG1: [ 0.76693438  0.78614717  0.81710692  0.85943306  0.91393702]
NDCG2: [ 0.68946275  0.72132052  0.76310677  0.81668581  0.88797056]
NDCG3: [ 0.76467167  0.78377684  0.81520892  0.85751938  0.91301624]
NDCG4: [ 0.68399105  0.71663106  0.75918911  0.8143113   0.88619886]
Iteration 2 [135.3 s]: ranku_loss = 0.672600 [42.44 s],
NDCG1: [ 0.79502685  0.81040142  0.83809062  0.87491103  0.92367693]
NDCG2: [ 0.79581233  0.81058993  0.83815759  0.87481893  0.92380179]
NDCG3: [ 0.79548164  0.81052909  0.83812454  0.87501561  0.92374992]
NDCG4: [ 0.79475427  0.81027773  0.83760411  0.87429519  0.92355532]
Iteration 3 [164.3 s]: ranku_loss = 0.642327 [47.07 s],
NDCG1: [ 0.79924234  0.81383584  0.84085044  0.87778498  0.92520033]
NDCG2: [ 0.7945717   0.8126454   0.83952888  0.87697361  0.92437325]
NDCG3: [ 0.79909155  0.81380351  0.84082143  0.87775523  0.92519018]
NDCG4: [ 0.79783216  0.81358897  0.84061072  0.87776339  0.9250081 ]
Iteration 4 [283.2 s]: ranku_loss = 0.626961 [46.42 s],
NDCG1: [ 0.79976301  0.815345    0.84221302  0.8786073   0.92563948]
NDCG2: [ 0.79119699  0.80923743  0.83787303  0.87572417  0.92331421]
NDCG3: [ 0.80063083  0.81490667  0.84165912  0.87865802  0.92564054]
NDCG4: [ 0.79283697  0.80814409  0.83761021  0.8757426   0.92335033]
Iteration 5 [297.8 s]: ranku_loss = 0.600802 [47.20 s],
NDCG1: [ 0.7985361   0.81487085  0.84136328  0.87807002  0.92535987]
NDCG2: [ 0.78398957  0.80285023  0.83296395  0.87164569  0.92080259]
NDCG3: [ 0.80087293  0.81445725  0.84158136  0.87763018  0.92558914]
NDCG4: [ 0.78039255  0.80035712  0.83057167  0.86976791  0.91970974]
End. Best Model is model3.
Test_NDCG:
[ 0.80144131  0.79557689  0.79483321  0.79434458  0.7940553   0.79506447
  0.79704076  0.7999986   0.80422777  0.80912244]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix20/ --batch_size_random 1280000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [33.7 s]. #user=16834, #item=30133, #train_user=3535140, #cv=84170, #test=944442
Time: [46.3], Init: 
Init_NDCG1: [ 0.71787409  0.74635252  0.7846455   0.83275537  0.89790228]
Init_NDCG2: [ 0.72234767  0.74804822  0.78500292  0.83425343  0.898621  ]
Init_NDCG3: [ 0.71560124  0.74442126  0.78326889  0.83242312  0.89719514]
Init_NDCG4: [ 0.7203486   0.7479121   0.7845072   0.83376817  0.89833552]
Iteration 0 [281.4 s]: ranku_loss = 0.847717 [46.21 s],
NDCG1: [ 0.76541784  0.78460714  0.81610563  0.85846119  0.91346861]
NDCG2: [ 0.67210234  0.70794147  0.7521353   0.80810402  0.88239418]
NDCG3: [ 0.76456601  0.78394392  0.81536983  0.85798924  0.91316327]
NDCG4: [ 0.67160974  0.707595    0.75162948  0.80781722  0.88221225]
Iteration 1 [341.9 s]: ranku_loss = 0.676278 [44.87 s],
NDCG1: [ 0.79763572  0.81303661  0.84074618  0.87743892  0.92484985]
NDCG2: [ 0.79793892  0.81327699  0.84077814  0.87766258  0.92488529]
NDCG3: [ 0.79825275  0.81313863  0.84068552  0.87711323  0.92489286]
NDCG4: [ 0.79850723  0.81308641  0.84029168  0.87749571  0.9248786 ]
Iteration 2 [295.7 s]: ranku_loss = 0.620448 [52.58 s],
NDCG1: [ 0.79774471  0.8123487   0.83966454  0.87668788  0.92465973]
NDCG2: [ 0.79071118  0.80801456  0.836714    0.87493114  0.92284163]
NDCG3: [ 0.7972309   0.81054183  0.83784099  0.87377287  0.92396916]
NDCG4: [ 0.78609398  0.80558461  0.83565374  0.87334348  0.92185243]
End. Best Model is model1.
Test_NDCG:
[ 0.78203562  0.7795451   0.7786604   0.77832922  0.77907072  0.78083654
  0.78367481  0.78780064  0.79230624  0.79785187]
Test_NDCG By model1:
[ 0.80451113  0.79942406  0.79596196  0.79491599  0.79420731  0.79519842
  0.79739779  0.80025979  0.80418328  0.80894528]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix20/ --batch_size_random 1280000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [33.9 s]. #user=16834, #item=30133, #train_user=3535140, #cv=84170, #test=944442
Time: [46.2], Init: 
Init_NDCG1: [ 0.71852405  0.74639004  0.78397447  0.83291209  0.89776102]
Init_NDCG2: [ 0.7262955   0.74844412  0.78489336  0.83408742  0.89912407]
Init_NDCG3: [ 0.71762348  0.74694987  0.78422035  0.8325035   0.89779488]
Init_NDCG4: [ 0.72077978  0.74625643  0.78305925  0.8326945   0.89792858]
Iteration 0 [373.2 s]: ranku_loss = 0.855742 [51.05 s],
NDCG1: [ 0.793368    0.81174249  0.83932805  0.87652595  0.9240235 ]
NDCG2: [ 0.7889187   0.809668    0.83827558  0.87590358  0.92309013]
NDCG3: [ 0.79359898  0.81185439  0.8395498   0.87654357  0.92408559]
NDCG4: [ 0.78848965  0.80958203  0.83830131  0.87583867  0.92303365]
Iteration 1 [321.6 s]: ranku_loss = 0.640831 [47.60 s],
NDCG1: [ 0.80071372  0.81522666  0.84236928  0.87913384  0.92585237]
NDCG2: [ 0.80047924  0.81522356  0.84229337  0.87906047  0.92578697]
NDCG3: [ 0.80111595  0.81520122  0.84240727  0.87925454  0.92590835]
NDCG4: [ 0.8005952   0.81547253  0.84243474  0.87909284  0.92583222]
Iteration 2 [294.1 s]: ranku_loss = 0.622147 [49.56 s],
NDCG1: [ 0.79896424  0.81368241  0.84102745  0.87778983  0.92524934]
NDCG2: [ 0.79089503  0.80782825  0.83638292  0.87442909  0.92288483]
NDCG3: [ 0.79813423  0.81411695  0.84143995  0.87799725  0.92525961]
NDCG4: [ 0.78994851  0.80683435  0.83582632  0.87385814  0.92259304]
End. Best Model is model3.
Test_NDCG:
[ 0.80726874  0.80137066  0.7983105   0.79754868  0.79719937  0.79816866
  0.79986674  0.80264492  0.80631824  0.81097552]
Test_NDCG By model1:
[ 0.80594218  0.80006387  0.79732101  0.79623775  0.79596154  0.79670359
  0.79868469  0.80154956  0.80531974  0.81018888]

liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix20/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [33.0 s]. #user=16834, #item=30133, #train_user=3535140, #cv=84170, #test=944442
Time: [45.8], Init: 
Init_NDCG1: [ 0.72248896  0.74927435  0.78456473  0.8328283   0.898654  ]
Init_NDCG2: [ 0.71730637  0.74502067  0.78088704  0.83116498  0.89710942]
Init_NDCG3: [ 0.72024987  0.74680257  0.78418965  0.8332212   0.89810742]
Init_NDCG4: [ 0.71805524  0.74587704  0.78335157  0.83258948  0.89766465]
Iteration 0 [57.6 s]: ranku_loss = 1.374965 [43.79 s],
NDCG1: [ 0.76179147  0.78100488  0.81233079  0.85530584  0.91175866]
NDCG2: [ 0.67733818  0.71278279  0.75534411  0.8106501   0.88428881]
NDCG3: [ 0.76174497  0.78107555  0.81232256  0.85517853  0.9117402 ]
NDCG4: [ 0.67751112  0.71171358  0.75518361  0.81009186  0.88412277]
Iteration 1 [53.0 s]: ranku_loss = 0.695751 [43.70 s],
NDCG1: [ 0.76970924  0.78762842  0.81883964  0.86024693  0.91458564]
NDCG2: [ 0.6675185   0.70436102  0.74949268  0.8061178   0.88116451]
NDCG3: [ 0.76988284  0.78765937  0.81899723  0.86028106  0.91464099]
NDCG4: [ 0.66572884  0.70262862  0.74801718  0.80516965  0.8804853 ]
Iteration 2 [53.6 s]: ranku_loss = 0.691490 [43.65 s],
NDCG1: [ 0.7758348   0.79451929  0.82434812  0.86499455  0.91715456]
NDCG2: [ 0.65695762  0.69696202  0.74387256  0.80223305  0.8780505 ]
NDCG3: [ 0.77580491  0.79443762  0.82433917  0.86495858  0.91713724]
NDCG4: [ 0.65335482  0.69367185  0.74140094  0.80012013  0.87684549]
Iteration 3 [53.4 s]: ranku_loss = 0.687045 [43.55 s],
NDCG1: [ 0.78001375  0.79963464  0.82820048  0.86804448  0.91899584]
NDCG2: [ 0.66355655  0.70128093  0.74821054  0.80644663  0.8802139 ]
NDCG3: [ 0.77993965  0.79968107  0.82827221  0.86801279  0.91899184]
NDCG4: [ 0.64722284  0.68865112  0.73692959  0.79691096  0.8748486 ]
Iteration 4 [53.5 s]: ranku_loss = 0.681054 [43.88 s],
NDCG1: [ 0.78559557  0.80322835  0.8319842   0.87122702  0.92069305]
NDCG2: [ 0.78860207  0.80585078  0.83384777  0.87213037  0.92187789]
NDCG3: [ 0.78545377  0.80327032  0.83193566  0.87115802  0.92067135]
NDCG4: [ 0.74080322  0.76575089  0.79997849  0.84616058  0.90545814]
Iteration 5 [53.8 s]: ranku_loss = 0.669182 [43.44 s],
NDCG1: [ 0.79189958  0.8083499   0.83646464  0.87419496  0.92287386]
NDCG2: [ 0.79450363  0.81026828  0.8377865   0.87556346  0.92372744]
NDCG3: [ 0.79210423  0.80850877  0.83648706  0.87424478  0.92292722]
NDCG4: [ 0.7809661   0.7985459   0.82780036  0.86717238  0.91881898]
Iteration 6 [53.4 s]: ranku_loss = 0.652603 [43.66 s],
NDCG1: [ 0.7953559   0.81253909  0.83792314  0.87588885  0.92411208]
NDCG2: [ 0.79519727  0.8105301   0.83814774  0.87617501  0.92398707]
NDCG3: [ 0.79549387  0.81250906  0.83786025  0.87593571  0.92411985]
NDCG4: [ 0.78946179  0.80740034  0.83355929  0.87063166  0.9217782 ]
Iteration 7 [53.4 s]: ranku_loss = 0.646210 [44.11 s],
NDCG1: [ 0.79532093  0.81296265  0.83990217  0.87637228  0.92441195]
NDCG2: [ 0.7935954   0.8107944   0.83850912  0.87652348  0.92386601]
NDCG3: [ 0.79523227  0.81297335  0.83976548  0.87628007  0.92437477]
NDCG4: [ 0.79364164  0.8102428   0.83666371  0.87314599  0.92326218]
Iteration 8 [53.7 s]: ranku_loss = 0.642613 [44.28 s],
NDCG1: [ 0.79736839  0.81394492  0.84150015  0.87747315  0.92507422]
NDCG2: [ 0.79495068  0.81154752  0.83964573  0.87713072  0.92424738]
NDCG3: [ 0.79710523  0.81380146  0.84133757  0.87736366  0.92500264]
NDCG4: [ 0.79619116  0.81243298  0.83922339  0.87491766  0.92424851]
Iteration 9 [53.8 s]: ranku_loss = 0.639228 [43.64 s],
NDCG1: [ 0.7969412   0.81443206  0.84166121  0.87795719  0.92514823]
NDCG2: [ 0.79598687  0.81205318  0.84035042  0.87736778  0.92451942]
NDCG3: [ 0.79683487  0.81436556  0.84160193  0.87778921  0.92510261]
NDCG4: [ 0.7963622   0.81152942  0.83826735  0.87458678  0.9240524 ]
Iteration 10 [53.4 s]: ranku_loss = 0.634573 [43.57 s],
NDCG1: [ 0.79783705  0.81481439  0.84143405  0.87840933  0.92530883]
NDCG2: [ 0.79552843  0.81281504  0.84006391  0.8775227   0.92455502]
NDCG3: [ 0.79747202  0.81443755  0.8410258   0.87795919  0.92513787]
NDCG4: [ 0.79580477  0.81156836  0.83725104  0.8741407   0.92379307]
Iteration 11 [53.4 s]: ranku_loss = 0.628542 [43.65 s],
NDCG1: [ 0.7990959   0.81508231  0.84205776  0.87854109  0.92557317]
NDCG2: [ 0.79438475  0.8116719   0.83961169  0.87711179  0.92425571]
NDCG3: [ 0.79786516  0.81426398  0.84122149  0.87793979  0.92517062]
NDCG4: [ 0.79305808  0.80841979  0.83507727  0.8725083   0.92270122]
Iteration 12 [53.6 s]: ranku_loss = 0.621870 [43.42 s],
NDCG1: [ 0.79886657  0.81495312  0.84185108  0.87868305  0.92549903]
NDCG2: [ 0.79070249  0.80788374  0.83686664  0.87500864  0.92290379]
NDCG3: [ 0.79937246  0.81393084  0.8411015   0.87831843  0.92528956]
NDCG4: [ 0.78587082  0.80215457  0.82891414  0.86748595  0.92002772]
End. Best Model is model1.
Test_NDCG:
[ 0.80135926  0.79692192  0.79515258  0.79436445  0.79459211  0.79555106
  0.79796014  0.8004592   0.80450221  0.80955006]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [36.5 s]. #user=16834, #item=30133, #train_user=3535140, #cv=84170, #test=944442
Time: [50.5], Init: 
Init_NDCG1: [ 0.72100097  0.74634994  0.78342857  0.83228988  0.89794999]
Init_NDCG2: [ 0.71803082  0.7457404   0.783764    0.83258743  0.89746497]
Init_NDCG3: [ 0.72151167  0.7480836   0.78505088  0.83346004  0.89860543]
Init_NDCG4: [ 0.71621645  0.74313965  0.78063113  0.83157639  0.89663685]
Iteration 0 [143.6 s]: ranku_loss = 0.934290 [48.45 s],
NDCG1: [ 0.73200291  0.75764653  0.79392382  0.84072919  0.90240259]
NDCG2: [ 0.70670461  0.73640875  0.77615784  0.82725223  0.89394459]
NDCG3: [ 0.73023387  0.75655981  0.79276082  0.84001484  0.90189783]
NDCG4: [ 0.70506423  0.7345486   0.77499841  0.82592919  0.89330969]
Iteration 1 [140.2 s]: ranku_loss = 0.692487 [48.18 s],
NDCG1: [ 0.78355515  0.80057251  0.82960242  0.86823966  0.91971154]
NDCG2: [ 0.77940219  0.79897603  0.82950471  0.86935056  0.91913962]
NDCG3: [ 0.74029229  0.76453294  0.79897063  0.84446199  0.90501798]
NDCG4: [ 0.71188373  0.7396408   0.7782263   0.82910961  0.89533528]
Iteration 2 [139.8 s]: ranku_loss = 0.654971 [47.96 s],
NDCG1: [ 0.79674103  0.8129469   0.84025337  0.87733574  0.92478068]
NDCG2: [ 0.79690579  0.81255625  0.83982007  0.87740494  0.9246913 ]
NDCG3: [ 0.77252638  0.79332703  0.82346095  0.86494057  0.91674263]
NDCG4: [ 0.76586902  0.78574605  0.81617042  0.85824497  0.91366244]
Iteration 3 [138.2 s]: ranku_loss = 0.628153 [43.48 s],
NDCG1: [ 0.7993261   0.81434409  0.84170433  0.87881832  0.92555734]
NDCG2: [ 0.79708745  0.81394109  0.84107727  0.87821476  0.92504727]
NDCG3: [ 0.77748661  0.79464136  0.82498899  0.86592838  0.91766705]
NDCG4: [ 0.77606782  0.79465575  0.82440858  0.86503736  0.91736359]
Iteration 4 [133.7 s]: ranku_loss = 0.608591 [43.33 s],
NDCG1: [ 0.79793615  0.81356653  0.8413799   0.87796868  0.92518061]
NDCG2: [ 0.79094934  0.808347    0.83736501  0.87523987  0.9230805 ]
NDCG3: [ 0.77906187  0.79699114  0.82711293  0.8675087   0.91850971]
NDCG4: [ 0.7775453   0.79486849  0.82410292  0.86534828  0.91755267]
End. Best Model is model1.
Test_NDCG:
[ 0.80008997  0.79417897  0.79138103  0.79099969  0.79095389  0.79280059
  0.79552976  0.79854446  0.80264909  0.80768358]
liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [33.9 s]. #user=16834, #item=30133, #train_user=3535140, #cv=84170, #test=944442
Time: [45.8], Init: 
Init_NDCG1: [ 0.71818993  0.74522122  0.7822756   0.83198108  0.89721229]
Init_NDCG2: [ 0.71861062  0.7457688   0.7831831   0.83295272  0.89764283]
Init_NDCG3: [ 0.7203378   0.74610411  0.78299176  0.83303846  0.89788125]
Init_NDCG4: [ 0.72238997  0.74915397  0.78572532  0.83390032  0.89888635]
Iteration 0 [138.8 s]: ranku_loss = 0.911753 [43.56 s],
NDCG1: [ 0.75751058  0.77578972  0.80805462  0.85280159  0.91002781]
NDCG2: [ 0.69756139  0.73158416  0.7717997   0.82343109  0.89167773]
NDCG3: [ 0.7535534   0.77391118  0.80564131  0.85086072  0.90892339]
NDCG4: [ 0.69529014  0.73041111  0.77050552  0.8225047   0.89105633]
Iteration 1 [133.3 s]: ranku_loss = 0.666229 [43.41 s],
NDCG1: [ 0.79586029  0.81151601  0.83907522  0.87618962  0.92419663]
NDCG2: [ 0.7957159   0.81118934  0.83903183  0.87646935  0.9241207 ]
NDCG3: [ 0.79573692  0.811336    0.83918604  0.87580254  0.92412089]
NDCG4: [ 0.79587026  0.81119179  0.83910291  0.8764677   0.92414002]
Iteration 2 [133.6 s]: ranku_loss = 0.644656 [43.51 s],
NDCG1: [ 0.79952327  0.81461234  0.84161663  0.87811688  0.92544238]
NDCG2: [ 0.79782807  0.81404323  0.84122288  0.87807242  0.92514288]
NDCG3: [ 0.79967716  0.81439393  0.84146057  0.8775916   0.92538384]
NDCG4: [ 0.79887215  0.81406846  0.8412606   0.87812783  0.92529486]
Iteration 3 [133.4 s]: ranku_loss = 0.633650 [43.31 s],
NDCG1: [ 0.79981728  0.81486075  0.84150266  0.87859454  0.9255804 ]
NDCG2: [ 0.79587018  0.81220579  0.83968492  0.87762492  0.92450978]
NDCG3: [ 0.80054932  0.81533692  0.8416677   0.87847711  0.92567361]
NDCG4: [ 0.79877806  0.81426986  0.84113922  0.87804537  0.92528449]
Iteration 4 [133.7 s]: ranku_loss = 0.622226 [43.18 s],
NDCG1: [ 0.79922317  0.81414189  0.84045204  0.8777954   0.92526157]
NDCG2: [ 0.7932834   0.81037069  0.83824964  0.87573328  0.92374411]
NDCG3: [ 0.79741249  0.81321055  0.83944515  0.87588324  0.92460048]
NDCG4: [ 0.78867156  0.80569388  0.83432595  0.87247235  0.92194389]
End. Best Model is model3.
Test_NDCG:
[ 0.79746599  0.7939698   0.79204916  0.79135948  0.79110777  0.79262327
  0.79473325  0.7980127   0.80212328  0.80731775]
Test_NDCG By model1:
[ 0.79377837  0.78958738  0.78839702  0.78819125  0.78886739  0.79072579
  0.79325392  0.7969658   0.80128109  0.80654499]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix20/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [34.4 s]. #user=16834, #item=30133, #train_user=3535140, #cv=84170, #test=944442
Time: [49.2], Init: 
Init_NDCG1: [ 0.72001963  0.74658802  0.78387977  0.83305736  0.89793518]
Init_NDCG2: [ 0.72243052  0.74778726  0.78457248  0.83369568  0.89850058]
Init_NDCG3: [ 0.72411828  0.74883556  0.78422238  0.83440411  0.89885751]
Init_NDCG4: [ 0.72126446  0.74763682  0.78459302  0.83289679  0.89826347]
Iteration 0 [58.3 s]: ranku_loss = 1.185715 [46.53 s],
NDCG1: [ 0.74580582  0.76750026  0.80002889  0.84515846  0.90609097]
NDCG2: [ 0.69929933  0.72862457  0.76796944  0.8203578   0.8908116 ]
NDCG3: [ 0.7458098   0.76722899  0.7999935   0.84497886  0.90604766]
NDCG4: [ 0.69965269  0.72878451  0.76815669  0.82041673  0.89092385]
Iteration 1 [53.4 s]: ranku_loss = 0.700754 [46.23 s],
NDCG1: [ 0.74460114  0.76748564  0.80079448  0.8458896   0.9061512 ]
NDCG2: [ 0.70170993  0.73171077  0.77148188  0.8237745   0.89216212]
NDCG3: [ 0.74062959  0.76474185  0.79834282  0.84394638  0.90495816]
NDCG4: [ 0.70220531  0.73138341  0.7711704   0.82349063  0.89212732]
Iteration 2 [54.3 s]: ranku_loss = 0.693908 [46.78 s],
NDCG1: [ 0.7687013   0.78571452  0.81613131  0.85767533  0.91377217]
NDCG2: [ 0.75482597  0.77834668  0.81179813  0.855351    0.91075837]
NDCG3: [ 0.7524241   0.77396885  0.80500504  0.84903175  0.9085282 ]
NDCG4: [ 0.7479603   0.77187732  0.80612664  0.85126362  0.90823772]
Iteration 3 [54.3 s]: ranku_loss = 0.675563 [46.50 s],
NDCG1: [ 0.79246489  0.80760496  0.83501513  0.87365184  0.92261362]
NDCG2: [ 0.79265436  0.80908166  0.83621873  0.87432005  0.92304904]
NDCG3: [ 0.78739907  0.80377181  0.83102333  0.86962297  0.92073908]
NDCG4: [ 0.79006232  0.80722313  0.83481981  0.87311081  0.922296  ]
Iteration 4 [53.7 s]: ranku_loss = 0.652020 [45.78 s],
NDCG1: [ 0.79799867  0.81218858  0.8402188   0.87646585  0.92469348]
NDCG2: [ 0.79381217  0.81072734  0.83904164  0.87590211  0.92387885]
NDCG3: [ 0.79111355  0.80927509  0.83663467  0.87411825  0.92296528]
NDCG4: [ 0.7884764   0.80820366  0.83712306  0.87434481  0.92267782]
Iteration 5 [53.7 s]: ranku_loss = 0.643816 [46.50 s],
NDCG1: [ 0.79878404  0.81329762  0.84067906  0.87796141  0.92503968]
NDCG2: [ 0.79507478  0.81244614  0.84065589  0.87731246  0.92448837]
NDCG3: [ 0.7954374   0.81219287  0.83911412  0.8765972   0.92424613]
NDCG4: [ 0.79322646  0.8112022   0.8389115   0.87630935  0.92387051]
Iteration 6 [54.3 s]: ranku_loss = 0.639195 [46.40 s],
NDCG1: [ 0.79765798  0.81271127  0.84073927  0.87783913  0.9249304 ]
NDCG2: [ 0.79678228  0.81243864  0.84059136  0.87792806  0.92478359]
NDCG3: [ 0.79586785  0.81245098  0.83960435  0.87666047  0.92445823]
NDCG4: [ 0.79427426  0.81089539  0.8392067   0.87634974  0.92399943]
End. Best Model is model1.
Test_NDCG:
[ 0.81153379  0.8032962   0.7991776   0.79789105  0.79679727  0.79785711
  0.79961954  0.80285836  0.80690323  0.81171922]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix20/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [36.1 s]. #user=16834, #item=30133, #train_user=3535140, #cv=84170, #test=944442
Time: [48.8], Init: 
Init_NDCG1: [ 0.72024155  0.74569777  0.78315598  0.83289694  0.89782255]
Init_NDCG2: [ 0.72035021  0.74596517  0.78450727  0.83323672  0.89812268]
Init_NDCG3: [ 0.72239537  0.74797397  0.78424949  0.83312081  0.89859229]
Init_NDCG4: [ 0.71993966  0.74704525  0.78359462  0.83256821  0.89802315]
Iteration 0 [57.8 s]: ranku_loss = 1.450411 [46.18 s],
NDCG1: [ 0.77389805  0.79092751  0.82053526  0.86200922  0.91580118]
NDCG2: [ 0.66504144  0.70233658  0.74673527  0.80418565  0.8801762 ]
NDCG3: [ 0.77340646  0.79070247  0.82032337  0.86193319  0.9156853 ]
NDCG4: [ 0.66188522  0.70142106  0.74693635  0.80375775  0.87969123]
Iteration 1 [53.5 s]: ranku_loss = 0.691057 [46.53 s],
NDCG1: [ 0.77979252  0.79807271  0.82691805  0.86704791  0.91848642]
NDCG2: [ 0.65215018  0.6922395   0.73944069  0.79867066  0.87631318]
NDCG3: [ 0.77966503  0.79785863  0.82679047  0.86697946  0.91842232]
NDCG4: [ 0.65074329  0.69211505  0.73896276  0.79830753  0.87605911]
Iteration 2 [53.6 s]: ranku_loss = 0.685415 [47.01 s],
NDCG1: [ 0.78559057  0.80386175  0.8327636   0.87117931  0.92081448]
NDCG2: [ 0.64572127  0.68824014  0.73644408  0.79642335  0.87465191]
NDCG3: [ 0.78553691  0.80383836  0.83274168  0.87116935  0.92080845]
NDCG4: [ 0.64362563  0.686098    0.73441593  0.79531185  0.87377429]
Iteration 3 [54.5 s]: ranku_loss = 0.680873 [45.82 s],
NDCG1: [ 0.7901874   0.80763993  0.83565182  0.87362061  0.92233492]
NDCG2: [ 0.78606985  0.80423782  0.83328716  0.87228143  0.92112065]
NDCG3: [ 0.79021065  0.80775004  0.83564604  0.87362313  0.92235181]
NDCG4: [ 0.7804331   0.80002049  0.83002438  0.86906828  0.91932088]
Iteration 4 [53.8 s]: ranku_loss = 0.677550 [45.80 s],
NDCG1: [ 0.7924097   0.80932143  0.83716506  0.87474858  0.92308481]
NDCG2: [ 0.79405052  0.81011915  0.8372121   0.87575157  0.92348071]
NDCG3: [ 0.79260209  0.80926087  0.83713938  0.87476352  0.92309248]
NDCG4: [ 0.79342356  0.80949378  0.83695133  0.8747093   0.92321119]
Iteration 5 [54.0 s]: ranku_loss = 0.668322 [45.71 s],
NDCG1: [ 0.79701383  0.81148917  0.83900464  0.87640812  0.92425033]
NDCG2: [ 0.79626194  0.81031713  0.83815491  0.87620532  0.92392712]
NDCG3: [ 0.79714414  0.81151246  0.83898256  0.87644686  0.9242647 ]
NDCG4: [ 0.79663756  0.81132018  0.83875838  0.87620782  0.9241677 ]
Iteration 6 [53.7 s]: ranku_loss = 0.653422 [45.86 s],
NDCG1: [ 0.79861859  0.81272412  0.84054137  0.87745866  0.9248329 ]
NDCG2: [ 0.79467875  0.81076438  0.83837904  0.8759261   0.92381729]
NDCG3: [ 0.79837513  0.81260435  0.84051586  0.87738251  0.92478371]
NDCG4: [ 0.79793268  0.81284182  0.84057612  0.87707     0.92475397]
Iteration 7 [53.8 s]: ranku_loss = 0.647094 [45.89 s],
NDCG1: [ 0.79855643  0.81441241  0.84127157  0.87821312  0.9252614 ]
NDCG2: [ 0.79651831  0.81188614  0.83938375  0.87694155  0.92435647]
NDCG3: [ 0.79876338  0.8144305   0.8412405   0.87824666  0.92528411]
NDCG4: [ 0.79930329  0.81458051  0.84148949  0.87846949  0.92544417]
Iteration 8 [53.6 s]: ranku_loss = 0.642709 [45.69 s],
NDCG1: [ 0.79954079  0.81368787  0.84182309  0.87812427  0.92530083]
NDCG2: [ 0.79606513  0.81211668  0.83931479  0.87711954  0.92436858]
NDCG3: [ 0.79938979  0.81371846  0.84174499  0.87803714  0.92527997]
NDCG4: [ 0.79933307  0.81406326  0.84174203  0.87814032  0.92535006]
End. Best Model is model4.
Test_NDCG:
[ 0.80839728  0.80095157  0.79831868  0.79643566  0.79659644  0.79739012
  0.79905951  0.80183406  0.80593691  0.81060572]
Test_NDCG By model1:
[ 0.81058512  0.80258274  0.79956308  0.79814678  0.79752218  0.79863219
  0.80008169  0.80317014  0.80683832  0.81154504]


