liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [34.6 s]. #user=16834, #item=30133, #train_user=3535140, #cv=84170, #test=944442
Time: [52.7], Init: 
Init_NDCG1: [ 0.72063535  0.74615829  0.78317491  0.83274304  0.89789082]
Init_NDCG2: [ 0.71774364  0.74569891  0.78260975  0.83160511  0.89738139]
Init_NDCG3: [ 0.71976544  0.74739734  0.78484155  0.83283706  0.89807524]
Init_NDCG4: [ 0.7198729   0.74554592  0.78229902  0.83184352  0.89747749]
Iteration 0 [272.2 s]: ranku_loss = 0.980946 [47.44 s],
NDCG1: [ 0.75054015  0.7727116   0.80595613  0.8502239   0.90839524]
NDCG2: [ 0.68640194  0.71951295  0.76151203  0.81604652  0.88726944]
NDCG3: [ 0.74985567  0.77253777  0.80542401  0.84996736  0.90823072]
NDCG4: [ 0.68701689  0.7193478   0.76138644  0.81609933  0.88729496]
Iteration 1 [252.6 s]: ranku_loss = 0.694259 [42.58 s],
NDCG1: [ 0.76693438  0.78614717  0.81710692  0.85943306  0.91393702]
NDCG2: [ 0.68946275  0.72132052  0.76310677  0.81668581  0.88797056]
NDCG3: [ 0.76467167  0.78377684  0.81520892  0.85751938  0.91301624]
NDCG4: [ 0.68399105  0.71663106  0.75918911  0.8143113   0.88619886]
Iteration 2 [135.3 s]: ranku_loss = 0.672600 [42.44 s],
NDCG1: [ 0.79502685  0.81040142  0.83809062  0.87491103  0.92367693]
NDCG2: [ 0.79581233  0.81058993  0.83815759  0.87481893  0.92380179]
NDCG3: [ 0.79548164  0.81052909  0.83812454  0.87501561  0.92374992]
NDCG4: [ 0.79475427  0.81027773  0.83760411  0.87429519  0.92355532]
Iteration 3 [164.3 s]: ranku_loss = 0.642327 [47.07 s],
NDCG1: [ 0.79924234  0.81383584  0.84085044  0.87778498  0.92520033]
NDCG2: [ 0.7945717   0.8126454   0.83952888  0.87697361  0.92437325]
NDCG3: [ 0.79909155  0.81380351  0.84082143  0.87775523  0.92519018]
NDCG4: [ 0.79783216  0.81358897  0.84061072  0.87776339  0.9250081 ]
Iteration 4 [283.2 s]: ranku_loss = 0.626961 [46.42 s],
NDCG1: [ 0.79976301  0.815345    0.84221302  0.8786073   0.92563948]
NDCG2: [ 0.79119699  0.80923743  0.83787303  0.87572417  0.92331421]
NDCG3: [ 0.80063083  0.81490667  0.84165912  0.87865802  0.92564054]
NDCG4: [ 0.79283697  0.80814409  0.83761021  0.8757426   0.92335033]
Iteration 5 [297.8 s]: ranku_loss = 0.600802 [47.20 s],
NDCG1: [ 0.7985361   0.81487085  0.84136328  0.87807002  0.92535987]
NDCG2: [ 0.78398957  0.80285023  0.83296395  0.87164569  0.92080259]
NDCG3: [ 0.80087293  0.81445725  0.84158136  0.87763018  0.92558914]
NDCG4: [ 0.78039255  0.80035712  0.83057167  0.86976791  0.91970974]
End. Best Model is model3.
Test_NDCG:
[ 0.80144131  0.79557689  0.79483321  0.79434458  0.7940553   0.79506447
  0.79704076  0.7999986   0.80422777  0.80912244]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix20/ --batch_size_random 1280000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [33.7 s]. #user=16834, #item=30133, #train_user=3535140, #cv=84170, #test=944442
Time: [46.3], Init: 
Init_NDCG1: [ 0.71787409  0.74635252  0.7846455   0.83275537  0.89790228]
Init_NDCG2: [ 0.72234767  0.74804822  0.78500292  0.83425343  0.898621  ]
Init_NDCG3: [ 0.71560124  0.74442126  0.78326889  0.83242312  0.89719514]
Init_NDCG4: [ 0.7203486   0.7479121   0.7845072   0.83376817  0.89833552]
Iteration 0 [281.4 s]: ranku_loss = 0.847717 [46.21 s],
NDCG1: [ 0.76541784  0.78460714  0.81610563  0.85846119  0.91346861]
NDCG2: [ 0.67210234  0.70794147  0.7521353   0.80810402  0.88239418]
NDCG3: [ 0.76456601  0.78394392  0.81536983  0.85798924  0.91316327]
NDCG4: [ 0.67160974  0.707595    0.75162948  0.80781722  0.88221225]
Iteration 1 [341.9 s]: ranku_loss = 0.676278 [44.87 s],
NDCG1: [ 0.79763572  0.81303661  0.84074618  0.87743892  0.92484985]
NDCG2: [ 0.79793892  0.81327699  0.84077814  0.87766258  0.92488529]
NDCG3: [ 0.79825275  0.81313863  0.84068552  0.87711323  0.92489286]
NDCG4: [ 0.79850723  0.81308641  0.84029168  0.87749571  0.9248786 ]
Iteration 2 [295.7 s]: ranku_loss = 0.620448 [52.58 s],
NDCG1: [ 0.79774471  0.8123487   0.83966454  0.87668788  0.92465973]
NDCG2: [ 0.79071118  0.80801456  0.836714    0.87493114  0.92284163]
NDCG3: [ 0.7972309   0.81054183  0.83784099  0.87377287  0.92396916]
NDCG4: [ 0.78609398  0.80558461  0.83565374  0.87334348  0.92185243]
End. Best Model is model1.
Test_NDCG:
[ 0.78203562  0.7795451   0.7786604   0.77832922  0.77907072  0.78083654
  0.78367481  0.78780064  0.79230624  0.79785187]
Test_NDCG By model1:
[ 0.80451113  0.79942406  0.79596196  0.79491599  0.79420731  0.79519842
  0.79739779  0.80025979  0.80418328  0.80894528]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix20/ --batch_size_random 1280000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=1280000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [33.9 s]. #user=16834, #item=30133, #train_user=3535140, #cv=84170, #test=944442
Time: [46.2], Init: 
Init_NDCG1: [ 0.71852405  0.74639004  0.78397447  0.83291209  0.89776102]
Init_NDCG2: [ 0.7262955   0.74844412  0.78489336  0.83408742  0.89912407]
Init_NDCG3: [ 0.71762348  0.74694987  0.78422035  0.8325035   0.89779488]
Init_NDCG4: [ 0.72077978  0.74625643  0.78305925  0.8326945   0.89792858]
Iteration 0 [373.2 s]: ranku_loss = 0.855742 [51.05 s],
NDCG1: [ 0.793368    0.81174249  0.83932805  0.87652595  0.9240235 ]
NDCG2: [ 0.7889187   0.809668    0.83827558  0.87590358  0.92309013]
NDCG3: [ 0.79359898  0.81185439  0.8395498   0.87654357  0.92408559]
NDCG4: [ 0.78848965  0.80958203  0.83830131  0.87583867  0.92303365]
Iteration 1 [321.6 s]: ranku_loss = 0.640831 [47.60 s],
NDCG1: [ 0.80071372  0.81522666  0.84236928  0.87913384  0.92585237]
NDCG2: [ 0.80047924  0.81522356  0.84229337  0.87906047  0.92578697]
NDCG3: [ 0.80111595  0.81520122  0.84240727  0.87925454  0.92590835]
NDCG4: [ 0.8005952   0.81547253  0.84243474  0.87909284  0.92583222]
Iteration 2 [294.1 s]: ranku_loss = 0.622147 [49.56 s],
NDCG1: [ 0.79896424  0.81368241  0.84102745  0.87778983  0.92524934]
NDCG2: [ 0.79089503  0.80782825  0.83638292  0.87442909  0.92288483]
NDCG3: [ 0.79813423  0.81411695  0.84143995  0.87799725  0.92525961]
NDCG4: [ 0.78994851  0.80683435  0.83582632  0.87385814  0.92259304]
End. Best Model is model3.
Test_NDCG:
[ 0.80726874  0.80137066  0.7983105   0.79754868  0.79719937  0.79816866
  0.79986674  0.80264492  0.80631824  0.81097552]
Test_NDCG By model1:
[ 0.80594218  0.80006387  0.79732101  0.79623775  0.79596154  0.79670359
  0.79868469  0.80154956  0.80531974  0.81018888]

