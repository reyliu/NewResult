liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.22_single/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [14.3 s]. #user=28881, #item=30133, #train_user=577620, #cv=144405, #test=1277634
Time: [109.9], Init: 
Init_NDCG1: [ 0.72833274  0.75281559  0.78849659  0.83613488  0.90026065]
Init_NDCG2: [ 0.72775496  0.75201485  0.78778591  0.83575118  0.90001976]
Init_NDCG3: [ 0.72833274  0.75281559  0.78849659  0.83613488  0.90026065]
Init_NDCG4: [ 0.72775496  0.75201485  0.78778591  0.83575118  0.90001976]
Iteration 0 [83.5 s]: ranku_loss = 2.111906 [105.83 s],
NDCG1: [ 0.75759606  0.77555097  0.80722595  0.85079879  0.90949937]
NDCG2: [ 0.7007436   0.72943998  0.76926237  0.82104375  0.89111749]
NDCG3: [ 0.75759606  0.77555097  0.80722595  0.85079879  0.90949937]
NDCG4: [ 0.7007436   0.72943998  0.76926237  0.82104375  0.89111749]
Iteration 1 [84.7 s]: ranku_loss = 0.711422 [105.20 s],
NDCG1: [ 0.76825694  0.78505195  0.81461958  0.85677513  0.91316725]
NDCG2: [ 0.70139938  0.73081691  0.77037629  0.82232036  0.89161559]
NDCG3: [ 0.76825694  0.78505195  0.81461958  0.85677513  0.91316725]
NDCG4: [ 0.70139938  0.73081691  0.77037629  0.82232036  0.89161559]
Iteration 2 [85.0 s]: ranku_loss = 0.684189 [105.02 s],
NDCG1: [ 0.7863678   0.80066139  0.82841368  0.86774201  0.91959997]
NDCG2: [ 0.78421559  0.80094185  0.82832318  0.86789229  0.91950505]
NDCG3: [ 0.7863678   0.80066139  0.82841368  0.86774201  0.91959997]
NDCG4: [ 0.78421559  0.80094185  0.82832318  0.86789229  0.91950505]
Iteration 3 [82.0 s]: ranku_loss = 0.644011 [121.03 s],
NDCG1: [ 0.79081701  0.80458511  0.83233116  0.87044624  0.92137274]
NDCG2: [ 0.78953593  0.80444774  0.83188764  0.8706212   0.92118384]
NDCG3: [ 0.79081701  0.80458511  0.83233116  0.87044624  0.92137274]
NDCG4: [ 0.78953593  0.80444774  0.83188764  0.8706212   0.92118384]
Iteration 4 [84.2 s]: ranku_loss = 0.629473 [109.46 s],
NDCG1: [ 0.79237516  0.80655903  0.83355445  0.87156131  0.92201867]
NDCG2: [ 0.78927139  0.80452593  0.83242358  0.87112454  0.92130337]
NDCG3: [ 0.79237516  0.80655903  0.83355445  0.87156131  0.92201867]
NDCG4: [ 0.78927139  0.80452593  0.83242358  0.87112454  0.92130337]
Iteration 5 [80.4 s]: ranku_loss = 0.622711 [109.54 s],
NDCG1: [ 0.79147228  0.80557635  0.83301027  0.8713804   0.92175934]
NDCG2: [ 0.78627019  0.80400829  0.83189806  0.87056634  0.92085319]
NDCG3: [ 0.79147228  0.80557635  0.83301027  0.8713804   0.92175934]
NDCG4: [ 0.78627019  0.80400829  0.83189806  0.87056634  0.92085319]
End. Best Model is model1.
Test_NDCG:
[ 0.79607644  0.79117765  0.78735288  0.78598735  0.78668601  0.78917513
  0.79261949  0.79716583  0.80290472  0.80998527]

liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.22_single/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [14.1 s]. #user=28881, #item=30133, #train_user=577620, #cv=144405, #test=1277634
Time: [109.7], Init: 
Init_NDCG1: [ 0.72863369  0.75183366  0.78700961  0.83516714  0.89984164]
Init_NDCG2: [ 0.72304775  0.74859397  0.78563808  0.83432239  0.89871733]
Init_NDCG3: [ 0.72863369  0.75183366  0.78700961  0.83516714  0.89984164]
Init_NDCG4: [ 0.72304775  0.74859397  0.78563808  0.83432239  0.89871733]
Iteration 0 [79.8 s]: ranku_loss = 2.272191 [105.99 s],
NDCG1: [ 0.76405085  0.78083066  0.8115527   0.8543779   0.91173435]
NDCG2: [ 0.71281113  0.73913179  0.7766523   0.82733494  0.89503727]
NDCG3: [ 0.76405085  0.78083066  0.8115527   0.8543779   0.91173435]
NDCG4: [ 0.71281113  0.73913179  0.7766523   0.82733494  0.89503727]
Iteration 1 [85.2 s]: ranku_loss = 0.724342 [105.74 s],
NDCG1: [ 0.77560057  0.79040948  0.82069096  0.86121728  0.91578808]
NDCG2: [ 0.68080312  0.71268335  0.75570209  0.81082378  0.88451265]
NDCG3: [ 0.77560057  0.79040948  0.82069096  0.86121728  0.91578808]
NDCG4: [ 0.68080312  0.71268335  0.75570209  0.81082378  0.88451265]
Iteration 2 [84.6 s]: ranku_loss = 0.684151 [104.84 s],
NDCG1: [ 0.78182651  0.79630995  0.82539741  0.86549472  0.91814285]
NDCG2: [ 0.78259536  0.79665084  0.82511394  0.8650753   0.91817396]
NDCG3: [ 0.78182651  0.79630995  0.82539741  0.86549472  0.91814285]
NDCG4: [ 0.78259536  0.79665084  0.82511394  0.8650753   0.91817396]
Iteration 3 [81.2 s]: ranku_loss = 0.666927 [122.05 s],
NDCG1: [ 0.78991066  0.80281326  0.83065652  0.86938283  0.92070364]
NDCG2: [ 0.79027591  0.80311663  0.82946072  0.86744681  0.92049714]
NDCG3: [ 0.78991066  0.80281326  0.83065652  0.86938283  0.92070364]
NDCG4: [ 0.79027591  0.80311663  0.82946072  0.86744681  0.92049714]
Iteration 4 [85.6 s]: ranku_loss = 0.649592 [110.08 s],
NDCG1: [ 0.7889201   0.80414614  0.83127275  0.86983753  0.92093333]
NDCG2: [ 0.78784675  0.8032584   0.82983258  0.86778075  0.92034219]
NDCG3: [ 0.7889201   0.80414614  0.83127275  0.86983753  0.92093333]
NDCG4: [ 0.78784675  0.8032584   0.82983258  0.86778075  0.92034219]
Iteration 5 [81.5 s]: ranku_loss = 0.639328 [110.56 s],
NDCG1: [ 0.78892861  0.80511785  0.83191611  0.870641    0.92122031]
NDCG2: [ 0.78686097  0.80306898  0.83109181  0.86956881  0.92053725]
NDCG3: [ 0.78892861  0.80511785  0.83191611  0.870641    0.92122031]
NDCG4: [ 0.78686097  0.80306898  0.83109181  0.86956881  0.92053725]
Iteration 6 [54.0 s]: ranku_loss = 0.630999 [123.27 s],
NDCG1: [ 0.79225768  0.80573463  0.8329221   0.87138074  0.92185984]
NDCG2: [ 0.78591103  0.80342832  0.8312791   0.87055924  0.92062161]
NDCG3: [ 0.79225768  0.80573463  0.8329221   0.87138074  0.92185984]
NDCG4: [ 0.78591103  0.80342832  0.8312791   0.87055924  0.92062161]
Iteration 7 [47.4 s]: ranku_loss = 0.620753 [98.89 s],
NDCG1: [ 0.79012828  0.8053118   0.83265468  0.8709858   0.92147144]
NDCG2: [ 0.78473953  0.80283704  0.83131049  0.87008681  0.92037243]
NDCG3: [ 0.79012828  0.8053118   0.83265468  0.8709858   0.92147144]
NDCG4: [ 0.78473953  0.80283704  0.83131049  0.87008681  0.92037243]
End. Best Model is model1.
Test_NDCG:
[ 0.78926518  0.78468948  0.78250871  0.78262816  0.78373689  0.78630736
  0.7901493   0.79507012  0.8011176   0.80819429]

liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.22_single/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix10/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix10/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [14.7 s]. #user=28881, #item=30133, #train_user=577620, #cv=144405, #test=1277634
Time: [104.0], Init: 
Init_NDCG1: [ 0.72596798  0.7508012   0.78733581  0.83576722  0.89965002]
Init_NDCG2: [ 0.72738526  0.75070227  0.78680702  0.83528748  0.8997211 ]
Init_NDCG3: [ 0.72596798  0.7508012   0.78733581  0.83576722  0.89965002]
Init_NDCG4: [ 0.72738526  0.75070227  0.78680702  0.83528748  0.8997211 ]
Iteration 0 [92.9 s]: ranku_loss = 2.031238 [102.48 s],
NDCG1: [ 0.7474355   0.76811103  0.80094841  0.84582061  0.90625083]
NDCG2: [ 0.70485727  0.73231955  0.77140005  0.82347946  0.89244565]
NDCG3: [ 0.7474355   0.76811103  0.80094841  0.84582061  0.90625083]
NDCG4: [ 0.70485727  0.73231955  0.77140005  0.82347946  0.89244565]
Iteration 1 [86.1 s]: ranku_loss = 0.709437 [102.53 s],
NDCG1: [ 0.75565552  0.77482508  0.80632696  0.85027921  0.90902238]
NDCG2: [ 0.69693085  0.72648683  0.7662837   0.81936132  0.88990433]
NDCG3: [ 0.75565552  0.77482508  0.80632696  0.85027921  0.90902238]
NDCG4: [ 0.69693085  0.72648683  0.7662837   0.81936132  0.88990433]
Iteration 2 [53.4 s]: ranku_loss = 0.699255 [118.05 s],
NDCG1: [ 0.76784861  0.7853096   0.81422743  0.85612274  0.91310055]
NDCG2: [ 0.69095561  0.72074839  0.76092831  0.81565266  0.88761236]
NDCG3: [ 0.76784861  0.7853096   0.81422743  0.85612274  0.91310055]
NDCG4: [ 0.69095561  0.72074839  0.76092831  0.81565266  0.88761236]
Iteration 3 [45.6 s]: ranku_loss = 0.684142 [95.02 s],
NDCG1: [ 0.78537882  0.800482    0.8268824   0.86649426  0.91927353]
NDCG2: [ 0.78919949  0.80236042  0.82959175  0.86931786  0.9205701 ]
NDCG3: [ 0.78537882  0.800482    0.8268824   0.86649426  0.91927353]
NDCG4: [ 0.78919949  0.80236042  0.82959175  0.86931786  0.9205701 ]
Iteration 4 [42.9 s]: ranku_loss = 0.644053 [95.12 s],
NDCG1: [ 0.79067554  0.80475105  0.83208255  0.87056088  0.92135871]
NDCG2: [ 0.78882862  0.80368117  0.831522    0.87074925  0.92098455]
NDCG3: [ 0.79067554  0.80475105  0.83208255  0.87056088  0.92135871]
NDCG4: [ 0.78882862  0.80368117  0.831522    0.87074925  0.92098455]
Iteration 5 [43.2 s]: ranku_loss = 0.627245 [95.13 s],
NDCG1: [ 0.78938696  0.80482311  0.83211898  0.87062191  0.92124478]
NDCG2: [ 0.78632923  0.80319983  0.83132321  0.8705695   0.92064446]
NDCG3: [ 0.78938696  0.80482311  0.83211898  0.87062191  0.92124478]
NDCG4: [ 0.78632923  0.80319983  0.83132321  0.8705695   0.92064446]
End. Best Model is model1.
Test_NDCG:
[ 0.79894948  0.79329731  0.78960621  0.78836837  0.78874858  0.79074563
  0.79385464  0.79839021  0.8040783   0.81092578]

