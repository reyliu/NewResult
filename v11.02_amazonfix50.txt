liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix50/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix50/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [128.0 s]. #user=6802, #item=30133, #train_user=13467960, #cv=34010, #test=532110
Time: [18.6], Init: 
Init_NDCG1: [ 0.71059095  0.74022676  0.77844441  0.8309285   0.89582222]
Init_NDCG2: [ 0.71051805  0.73759782  0.77845399  0.83005389  0.8955122 ]
Init_NDCG3: [ 0.70777927  0.73485909  0.77724083  0.82863136  0.89459917]
Init_NDCG4: [ 0.71402583  0.7411393   0.78138196  0.83145693  0.89681679]
Iteration 0 [145.1 s]: ranku_loss = 0.995641 [15.56 s],
NDCG1: [ 0.7096449   0.73858407  0.77844371  0.82936502  0.89537377]
NDCG2: [ 0.7154192   0.74230066  0.78105442  0.83329582  0.89732336]
NDCG3: [ 0.70769291  0.73808984  0.77719043  0.82868392  0.89492981]
NDCG4: [ 0.71629181  0.74259406  0.78059621  0.83329824  0.89736008]
Iteration 1 [141.1 s]: ranku_loss = 0.677454 [15.70 s],
NDCG1: [ 0.78190268  0.80637684  0.83578325  0.87463483  0.92199743]
NDCG2: [ 0.78692605  0.8071957   0.83585235  0.87456332  0.92265319]
NDCG3: [ 0.7794012   0.80517829  0.83481022  0.87411549  0.92143011]
NDCG4: [ 0.78662127  0.80682707  0.83576422  0.87454374  0.92257944]
Iteration 2 [124.6 s]: ranku_loss = 0.651778 [14.04 s],
NDCG1: [ 0.7970353   0.81387698  0.84150624  0.87892724  0.92570777]
NDCG2: [ 0.79183452  0.81158499  0.84018839  0.87803671  0.92461183]
NDCG3: [ 0.79525892  0.81308592  0.84137543  0.87887961  0.92538298]
NDCG4: [ 0.79269258  0.81188402  0.84048386  0.87837892  0.92481365]
Iteration 3 [172.3 s]: ranku_loss = 0.646114 [16.26 s],
NDCG1: [ 0.79835677  0.81450682  0.84263611  0.87999323  0.92597659]
NDCG2: [ 0.79721921  0.81292046  0.84234099  0.88001845  0.92568172]
NDCG3: [ 0.7947499   0.81165876  0.84202062  0.87938487  0.92521606]
NDCG4: [ 0.79671968  0.81294423  0.84241894  0.87989972  0.92563911]
Iteration 4 [211.3 s]: ranku_loss = 0.641223 [13.27 s],
NDCG1: [ 0.80301068  0.8155188   0.84340384  0.88129797  0.92688147]
NDCG2: [ 0.80202425  0.81532403  0.84374512  0.88127651  0.92678876]
NDCG3: [ 0.79939035  0.81406906  0.84324687  0.88072257  0.9262484 ]
NDCG4: [ 0.8013642   0.81440511  0.84336654  0.88091189  0.9265378 ]
Iteration 5 [218.7 s]: ranku_loss = 0.633937 [14.56 s],
NDCG1: [ 0.79804837  0.81365806  0.84238237  0.87970701  0.92591607]
NDCG2: [ 0.7969316   0.81388229  0.84321732  0.88051211  0.92595747]
NDCG3: [ 0.79445713  0.81233789  0.84220896  0.87995394  0.92541866]
NDCG4: [ 0.79477654  0.81372687  0.84210334  0.88045246  0.92558024]
End. Best Model is model1.
Test_NDCG:
[ 0.80929075  0.80186217  0.80002686  0.79738938  0.79668202  0.79644987
  0.79713412  0.79906111  0.80127702  0.80445674]

liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix50/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix50/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [157.4 s]. #user=6802, #item=30133, #train_user=13467960, #cv=34010, #test=532110
Time: [18.9], Init: 
Init_NDCG1: [ 0.7103896   0.74028054  0.7792926   0.83121504  0.89613212]
Init_NDCG2: [ 0.71171251  0.73668819  0.77562388  0.82749093  0.89494317]
Init_NDCG3: [ 0.71228413  0.74215015  0.78068291  0.82999493  0.89638473]
Init_NDCG4: [ 0.71371409  0.74036145  0.77743792  0.82985494  0.89604278]
Iteration 0 [235.3 s]: ranku_loss = 0.966345 [15.83 s],
NDCG1: [ 0.77881991  0.79595761  0.82454125  0.86629034  0.91849386]
NDCG2: [ 0.77654128  0.79632698  0.82439074  0.86625692  0.91827026]
NDCG3: [ 0.77917338  0.79575416  0.82430067  0.86649391  0.91847869]
NDCG4: [ 0.77627435  0.79667449  0.82436625  0.86600506  0.91823139]
Iteration 1 [195.8 s]: ranku_loss = 0.655000 [16.00 s],
NDCG1: [ 0.79897274  0.8132985   0.84141022  0.87912973  0.92577186]
NDCG2: [ 0.79725734  0.8128974   0.84051617  0.87879408  0.92542429]
NDCG3: [ 0.7989834   0.81291172  0.8412902   0.87922494  0.92573506]
NDCG4: [ 0.79794341  0.81299462  0.84059832  0.87885091  0.92554022]
Iteration 2 [258.1 s]: ranku_loss = 0.643967 [14.60 s],
NDCG1: [ 0.79925485  0.81440398  0.84321569  0.88005854  0.92621734]
NDCG2: [ 0.79777205  0.81410996  0.8425473   0.88007723  0.92595829]
NDCG3: [ 0.7990329   0.81417797  0.84304746  0.88003076  0.92615181]
NDCG4: [ 0.79909867  0.81438599  0.84285195  0.88036804  0.92622331]
Iteration 3 [213.3 s]: ranku_loss = 0.640088 [15.37 s],
NDCG1: [ 0.79880536  0.81518227  0.84225858  0.88021188  0.92629891]
NDCG2: [ 0.79813862  0.81496103  0.84219165  0.88022203  0.9261515 ]
NDCG3: [ 0.79938141  0.81517994  0.84224397  0.88036032  0.92638663]
NDCG4: [ 0.8005961   0.81611856  0.84313283  0.88099359  0.9267514 ]
Iteration 4 [198.3 s]: ranku_loss = 0.637445 [16.09 s],
NDCG1: [ 0.80280807  0.81617469  0.84401959  0.88136518  0.92704619]
NDCG2: [ 0.80113132  0.81642395  0.84344453  0.88156153  0.92685003]
NDCG3: [ 0.80286579  0.81619723  0.84371987  0.88179999  0.92707481]
NDCG4: [ 0.80156762  0.81537267  0.84355852  0.88114355  0.92671566]
Iteration 5 [225.4 s]: ranku_loss = 0.627644 [14.88 s],
NDCG1: [ 0.7994992   0.81606063  0.84337415  0.88183503  0.92663744]
NDCG2: [ 0.7950133   0.81266116  0.84229328  0.8796884   0.92539898]
NDCG3: [ 0.80082265  0.81629098  0.8445455   0.88170402  0.92694291]
NDCG4: [ 0.79781785  0.81462666  0.84191637  0.88044379  0.92590899]
End. Best Model is model3.
Test_NDCG:
[ 0.81242709  0.80705843  0.80296164  0.80057911  0.80011953  0.79985308
  0.80039543  0.80208273  0.80412047  0.80695817]
Test_NDCG By model1:
[ 0.80548732  0.80355793  0.80005209  0.79832856  0.79787419  0.79831958
  0.79894729  0.80067015  0.80264392  0.80569425]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix50/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix50/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [123.5 s]. #user=6802, #item=30133, #train_user=13467960, #cv=34010, #test=532110
Time: [17.7], Init: 
Init_NDCG1: [ 0.7121667   0.74124653  0.77882043  0.83030085  0.8961656 ]
Init_NDCG2: [ 0.7091441   0.73420343  0.77573291  0.82765193  0.89443853]
Init_NDCG3: [ 0.70739608  0.73490716  0.77573987  0.82823026  0.89452314]
Init_NDCG4: [ 0.71078417  0.73696017  0.77604501  0.82865035  0.89522538]
Iteration 0 [227.8 s]: ranku_loss = 0.974193 [14.76 s],
NDCG1: [ 0.70858955  0.73456308  0.7747182   0.82825601  0.89430246]
NDCG2: [ 0.7151015   0.74377155  0.78203654  0.83165968  0.89728586]
NDCG3: [ 0.71007082  0.73432442  0.77385005  0.82768057  0.89427572]
NDCG4: [ 0.71501488  0.74382926  0.7819457   0.83169602  0.89727686]
Iteration 1 [194.0 s]: ranku_loss = 0.690671 [14.82 s],
NDCG1: [ 0.78639914  0.80217782  0.83095831  0.87186938  0.92124927]
NDCG2: [ 0.77834838  0.79547812  0.82554712  0.8676304   0.91861304]
NDCG3: [ 0.78600963  0.80201441  0.83029583  0.87168349  0.92109703]
NDCG4: [ 0.77853807  0.79531193  0.82555121  0.86760088  0.91861412]
Iteration 2 [219.5 s]: ranku_loss = 0.657111 [14.45 s],
NDCG1: [ 0.79298589  0.80970933  0.83907666  0.87798689  0.92423315]
NDCG2: [ 0.78915237  0.8078741   0.83870488  0.87730221  0.92360249]
NDCG3: [ 0.79036337  0.80811479  0.8383813   0.8773585   0.923653  ]
NDCG4: [ 0.78940024  0.80777605  0.83870535  0.87726503  0.92362003]
Iteration 3 [233.4 s]: ranku_loss = 0.646696 [15.66 s],
NDCG1: [ 0.79796391  0.81275798  0.84131932  0.87949911  0.9256183 ]
NDCG2: [ 0.79941799  0.81402104  0.84220563  0.88068938  0.9261674 ]
NDCG3: [ 0.79146189  0.8103257   0.839771    0.8787174   0.92442357]
NDCG4: [ 0.79730097  0.81341578  0.84179454  0.88023987  0.92578282]
Iteration 4 [197.4 s]: ranku_loss = 0.639738 [15.53 s],
NDCG1: [ 0.7961673   0.81501981  0.84219949  0.87986988  0.92587516]
NDCG2: [ 0.79818721  0.81460257  0.84239321  0.88062209  0.92612545]
NDCG3: [ 0.78987611  0.80992179  0.83998777  0.87816898  0.9241687 ]
NDCG4: [ 0.79627199  0.81244064  0.84131116  0.87987246  0.9254589 ]
End. Best Model is model2.
Test_NDCG:
[ 0.80751645  0.80213427  0.7984269   0.79671658  0.79604036  0.79625264
  0.79672844  0.79843956  0.80113948  0.80415009]
Test_NDCG By model1:
[ 0.80968596  0.80427656  0.79903571  0.79741447  0.79612765  0.79634671
  0.79760508  0.79922796  0.80101673  0.80381887]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix50/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix50/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [128.6 s]. #user=6802, #item=30133, #train_user=13467960, #cv=34010, #test=532110
Time: [18.3], Init: 
Init_NDCG1: [ 0.70752498  0.73626052  0.7760972   0.82829468  0.89451819]
Init_NDCG2: [ 0.71083015  0.7374416   0.77668462  0.82980737  0.89541974]
Init_NDCG3: [ 0.70615383  0.73372134  0.77500623  0.82764372  0.89414877]
Init_NDCG4: [ 0.71140683  0.73657145  0.77674578  0.82896999  0.89520377]
Iteration 0 [187.1 s]: ranku_loss = 0.943912 [17.10 s],
NDCG1: [ 0.77436021  0.79144686  0.82040337  0.86242815  0.91641503]
NDCG2: [ 0.76089711  0.78081163  0.81394459  0.85750593  0.91256649]
NDCG3: [ 0.77271183  0.78891863  0.81798457  0.86088918  0.91553728]
NDCG4: [ 0.76002585  0.78044367  0.81387471  0.85743473  0.91241804]
Iteration 1 [235.2 s]: ranku_loss = 0.659789 [14.62 s],
NDCG1: [ 0.79477781  0.81068535  0.84027288  0.87822105  0.92485774]
NDCG2: [ 0.79403528  0.81012743  0.84047874  0.87827433  0.92459048]
NDCG3: [ 0.79416761  0.80958703  0.84008414  0.87822214  0.92465592]
NDCG4: [ 0.79439507  0.80992229  0.84031257  0.87824054  0.92458686]
Iteration 2 [186.1 s]: ranku_loss = 0.646179 [14.68 s],
NDCG1: [ 0.80053648  0.81455955  0.84319526  0.88028879  0.92641696]
NDCG2: [ 0.79904293  0.81406316  0.84305505  0.8801009   0.92619322]
NDCG3: [ 0.80008889  0.81428998  0.84311449  0.87996216  0.92628252]
NDCG4: [ 0.80000542  0.81447715  0.84353617  0.88051383  0.92642497]
Iteration 3 [196.1 s]: ranku_loss = 0.639725 [13.62 s],
NDCG1: [ 0.80261385  0.81599927  0.84324185  0.88075073  0.92677338]
NDCG2: [ 0.79872514  0.81534312  0.8425524   0.88066544  0.92620618]
NDCG3: [ 0.79963506  0.8157977   0.84359633  0.8807886   0.92647388]
NDCG4: [ 0.7995879   0.8148796   0.84290812  0.88096573  0.92635657]
Iteration 4 [228.6 s]: ranku_loss = 0.634215 [18.77 s],
NDCG1: [ 0.801096    0.81586523  0.84389763  0.88078922  0.92684163]
NDCG2: [ 0.80046738  0.81585057  0.84340989  0.88127297  0.92671504]
NDCG3: [ 0.80255857  0.81642336  0.84439986  0.88118405  0.92715656]
NDCG4: [ 0.80156952  0.81655041  0.84406698  0.88170723  0.92707253]
Iteration 5 [202.7 s]: ranku_loss = 0.623989 [19.06 s],
NDCG1: [ 0.79691561  0.81235147  0.8404277   0.87826017  0.92528974]
NDCG2: [ 0.79919478  0.81503923  0.84249902  0.88000011  0.92616849]
NDCG3: [ 0.80179147  0.81641195  0.84343944  0.88091765  0.92685579]
NDCG4: [ 0.7999608   0.81568474  0.84325944  0.88101648  0.92657713]
End. Best Model is model3.
Test_NDCG:
[ 0.81227975  0.80697002  0.80302957  0.80010586  0.79917091  0.79921042
  0.80001041  0.80177906  0.80385452  0.80638937]
Test_NDCG By model1:
[ 0.80898218  0.80084325  0.79869502  0.79706563  0.79590792  0.7956236
  0.79617222  0.79776698  0.80015796  0.80305672]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.02_2model/MLP.py --learner adam --lr 0.0001 --path Data/amazonfix50/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/amazonfix50/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [128.8 s]. #user=6802, #item=30133, #train_user=13467960, #cv=34010, #test=532110
Time: [18.9], Init: 
Init_NDCG1: [ 0.71003559  0.7389405   0.77877876  0.83059323  0.89585816]
Init_NDCG2: [ 0.71172651  0.73971     0.7783204   0.83028724  0.89592515]
Init_NDCG3: [ 0.7084284   0.73631624  0.77547273  0.82786649  0.89472461]
Init_NDCG4: [ 0.71062365  0.73799761  0.77670161  0.82761141  0.8950398 ]
Iteration 0 [133.0 s]: ranku_loss = 1.045510 [14.42 s],
NDCG1: [ 0.75288763  0.77181818  0.80383     0.84946951  0.90865166]
NDCG2: [ 0.72785704  0.75628652  0.7926779   0.84167782  0.90235097]
NDCG3: [ 0.75197961  0.77169214  0.80360056  0.84916606  0.90846327]
NDCG4: [ 0.72761422  0.75622712  0.79275047  0.84171963  0.9023365 ]
Iteration 1 [116.1 s]: ranku_loss = 0.660951 [14.54 s],
NDCG1: [ 0.79905485  0.81212614  0.84052919  0.87759397  0.92532719]
NDCG2: [ 0.79569594  0.81041039  0.83971004  0.87688849  0.9246658 ]
NDCG3: [ 0.79916867  0.81225275  0.84055533  0.87768091  0.92537144]
NDCG4: [ 0.79623911  0.81022865  0.83963743  0.8769002   0.9246974 ]
Iteration 2 [114.9 s]: ranku_loss = 0.644999 [14.58 s],
NDCG1: [ 0.80227547  0.81408988  0.84329125  0.88048954  0.92655526]
NDCG2: [ 0.79695608  0.81329482  0.8418505   0.87954862  0.92568064]
NDCG3: [ 0.80240826  0.81420014  0.84333327  0.8806621   0.92661225]
NDCG4: [ 0.79665003  0.81319404  0.84190294  0.87948775  0.92564644]
Iteration 3 [115.8 s]: ranku_loss = 0.641526 [14.63 s],
NDCG1: [ 0.79900346  0.81532031  0.84307681  0.88071476  0.92635751]
NDCG2: [ 0.79709194  0.8146898   0.84224842  0.88050866  0.92595357]
NDCG3: [ 0.79898449  0.81535235  0.8430581   0.8806809   0.92635263]
NDCG4: [ 0.79771541  0.81497216  0.84244252  0.88063353  0.92608198]
End. Best Model is model3.
Test_NDCG:
[ 0.81144508  0.80537615  0.80266993  0.80057729  0.79860035  0.79889858
  0.79972719  0.80126983  0.80338444  0.80614482]
Test_NDCG By model1:
[ 0.81144508  0.80503491  0.80243561  0.80034184  0.79846992  0.79894501
  0.79962953  0.80121379  0.80324377  0.8060838 ]


