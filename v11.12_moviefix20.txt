liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.12_pair/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=256000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [193.8 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [373.0], Init: 
Init_NDCG1: [ 0.60380418  0.65781511  0.71729265  0.78338779  0.8571588 ]
Init_NDCG2: [ 0.60164287  0.65382219  0.7129985   0.77940749  0.85546327]
Init_NDCG3: [ 0.60783145  0.65794281  0.71738797  0.78302324  0.85758265]
Init_NDCG4: [ 0.6122983   0.66126337  0.71856272  0.78340878  0.8586303 ]
Iteration 0 [29.9 s]: ranku_loss = 1.941145 [370.38 s],
NDCG1: [ 0.67122405  0.71130692  0.76022834  0.81541693  0.87985194]
NDCG2: [ 0.60339263  0.65619698  0.71460304  0.77958595  0.85619612]
NDCG3: [ 0.57831562  0.63248725  0.6934869   0.76339259  0.84631311]
NDCG4: [ 0.66185473  0.70396275  0.75418006  0.8106268   0.87665158]
Iteration 1 [33.3 s]: ranku_loss = 1.006061 [342.42 s],
NDCG1: [ 0.68207466  0.72113017  0.76837689  0.82145533  0.88392278]
NDCG2: [ 0.57895114  0.63096473  0.69214907  0.76230888  0.8460176 ]
NDCG3: [ 0.53948917  0.5999107   0.66581503  0.74125656  0.83251067]
NDCG4: [ 0.69616982  0.73281773  0.77896862  0.83003269  0.88909401]
Iteration 2 [34.7 s]: ranku_loss = 0.720437 [368.99 s],
NDCG1: [ 0.70116133  0.73780445  0.78294064  0.83329111  0.8911105 ]
NDCG2: [ 0.57661173  0.63001831  0.69314535  0.76457511  0.84592763]
NDCG3: [ 0.50631981  0.57026236  0.64101614  0.72135227  0.82031053]
NDCG4: [ 0.71697258  0.75446608  0.79843605  0.84607924  0.89804602]
Iteration 3 [34.9 s]: ranku_loss = 0.685529 [354.52 s],
NDCG1: [ 0.7278335   0.76384297  0.80739792  0.8538686   0.90235103]
NDCG2: [ 0.67057092  0.72022391  0.77395285  0.82763096  0.88347784]
NDCG3: [ 0.47566219  0.54509     0.62123639  0.70579225  0.81006447]
NDCG4: [ 0.73551861  0.772168    0.81543446  0.86013395  0.90579598]
Iteration 4 [35.3 s]: ranku_loss = 0.665537 [353.19 s],
NDCG1: [ 0.74562645  0.78285891  0.82501531  0.86796307  0.91020873]
NDCG2: [ 0.7448391   0.78125246  0.82262731  0.86498799  0.90925256]
NDCG3: [ 0.46199364  0.53338504  0.61109059  0.69882342  0.80532328]
NDCG4: [ 0.7455064   0.78322883  0.82492038  0.86759823  0.91016399]
Iteration 5 [35.2 s]: ranku_loss = 0.646346 [352.31 s],
NDCG1: [ 0.75256552  0.78999399  0.8311594   0.87284937  0.91310076]
NDCG2: [ 0.75374618  0.78976903  0.83057198  0.8717216   0.91298744]
NDCG3: [ 0.45724828  0.52933284  0.60784851  0.69619335  0.80365974]
NDCG4: [ 0.7501513   0.78731398  0.82876901  0.87093094  0.91200393]
Iteration 6 [35.7 s]: ranku_loss = 0.639717 [377.11 s],
NDCG1: [ 0.75699819  0.79394302  0.83458977  0.87530334  0.91474646]
NDCG2: [ 0.75807443  0.79384838  0.83416862  0.8746629   0.91469982]
NDCG3: [ 0.45943854  0.53184942  0.61044268  0.69828158  0.80468484]
NDCG4: [ 0.75150386  0.78787666  0.82944172  0.87153552  0.9123449 ]
Iteration 7 [36.6 s]: ranku_loss = 0.634123 [368.98 s],
NDCG1: [ 0.75875645  0.79509588  0.83598958  0.87638764  0.91535557]
NDCG2: [ 0.7590031   0.794918    0.83555277  0.87582302  0.91523144]
NDCG3: [ 0.4774304   0.54901246  0.62535332  0.71064398  0.81165209]
NDCG4: [ 0.74739817  0.78399836  0.82614945  0.86888847  0.91076367]
Iteration 8 [35.9 s]: ranku_loss = 0.633481 [365.85 s],
NDCG1: [ 0.75918127  0.79533336  0.836006    0.87658912  0.91542529]
NDCG2: [ 0.75904792  0.79544993  0.83598295  0.87655252  0.91542006]
NDCG3: [ 0.53520369  0.59899902  0.668372    0.74447575  0.83254664]
NDCG4: [ 0.7361369   0.77309202  0.81590375  0.86093658  0.90610375]
Iteration 9 [36.1 s]: ranku_loss = 0.631336 [364.89 s],
NDCG1: [ 0.76029635  0.79664026  0.83696909  0.87702877  0.91586725]
NDCG2: [ 0.75937496  0.79628019  0.83673232  0.87691782  0.91566236]
NDCG3: [ 0.61112848  0.66145766  0.72084637  0.78471139  0.85897626]
NDCG4: [ 0.71448972  0.75344977  0.79831624  0.84630284  0.8975638 ]
Iteration 10 [34.2 s]: ranku_loss = 0.628263 [323.83 s],
NDCG1: [ 0.76084259  0.79683636  0.83740656  0.87744396  0.91607516]
NDCG2: [ 0.75970824  0.79648     0.83704118  0.87729806  0.91582219]
NDCG3: [ 0.65996345  0.70114629  0.75262477  0.80958311  0.87574424]
NDCG4: [ 0.69685343  0.73639693  0.78393267  0.83423262  0.89052603]
Iteration 11 [36.0 s]: ranku_loss = 0.625556 [364.17 s],
NDCG1: [ 0.76162298  0.79716576  0.8380626   0.87780008  0.91631314]
NDCG2: [ 0.76008924  0.79679215  0.83748729  0.87735351  0.91596392]
NDCG3: [ 0.6630427   0.70479849  0.75545877  0.81186272  0.8771315 ]
NDCG4: [ 0.68341932  0.72337309  0.77240699  0.82506945  0.88505585]
Iteration 12 [34.2 s]: ranku_loss = 0.622098 [333.21 s],
NDCG1: [ 0.76135421  0.79759346  0.83775961  0.8777826   0.91629061]
NDCG2: [ 0.76014565  0.79666558  0.83720315  0.87740905  0.9159267 ]
NDCG3: [ 0.6718381   0.71238335  0.76140117  0.81614705  0.88019121]
NDCG4: [ 0.67191615  0.7132045   0.76324107  0.81764504  0.88063005]
End. Best Model is model1.
Test_NDCG:
[ 0.72175769  0.71531311  0.71389021  0.71269932  0.71326234  0.71484512
  0.71710364  0.72004121  0.72323716  0.72686501]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.12_pair/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [166.7 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [298.8], Init: 
Init_NDCG1: [ 0.60623937  0.65748132  0.71648267  0.78147183  0.85713033]
Init_NDCG2: [ 0.61807968  0.6672866   0.72424069  0.78821025  0.86120724]
Init_NDCG3: [ 0.61091618  0.66250081  0.720985    0.78560145  0.85923004]
Init_NDCG4: [ 0.60217937  0.65449629  0.7153632   0.78159606  0.85614374]
Iteration 0 [78.0 s]: ranku_loss = 1.012063 [297.52 s],
NDCG1: [ 0.72067645  0.75652225  0.80084269  0.84778968  0.89913499]
NDCG2: [ 0.66494728  0.71492513  0.76964722  0.82548386  0.88150385]
NDCG3: [ 0.59428583  0.64959982  0.71015519  0.7768053   0.85367623]
NDCG4: [ 0.58573874  0.63878008  0.70004206  0.76799612  0.84915497]
Iteration 1 [84.6 s]: ranku_loss = 0.653416 [296.60 s],
NDCG1: [ 0.7570651   0.79363741  0.83402544  0.87484896  0.91454009]
NDCG2: [ 0.75670521  0.79241545  0.83284115  0.87352607  0.91410233]
NDCG3: [ 0.55607237  0.61593784  0.68191091  0.75447946  0.83959874]
NDCG4: [ 0.56189057  0.62053081  0.68515488  0.75718548  0.84140779]
Iteration 2 [85.4 s]: ranku_loss = 0.634886 [296.33 s],
NDCG1: [ 0.75901121  0.79595385  0.83600093  0.87654514  0.91548504]
NDCG2: [ 0.75927017  0.79566249  0.83641559  0.87648804  0.91551266]
NDCG3: [ 0.5512895   0.61247516  0.67934554  0.7528338   0.83813545]
NDCG4: [ 0.57827052  0.63474557  0.69869993  0.76822774  0.84778091]
Iteration 3 [85.3 s]: ranku_loss = 0.628343 [297.21 s],
NDCG1: [ 0.76078952  0.79725705  0.83753852  0.87748878  0.91611591]
NDCG2: [ 0.76112462  0.79720812  0.83787179  0.87763966  0.91620811]
NDCG3: [ 0.59246966  0.64480554  0.70691143  0.77490177  0.85222948]
NDCG4: [ 0.55984841  0.61874192  0.68525252  0.75801858  0.84110499]
Iteration 4 [84.8 s]: ranku_loss = 0.619186 [297.28 s],
NDCG1: [ 0.76077503  0.79707638  0.83740841  0.87757148  0.91609329]
NDCG2: [ 0.75921297  0.79679455  0.83727871  0.87749724  0.91585957]
NDCG3: [ 0.62775158  0.67267488  0.7283346   0.79128664  0.86387068]
NDCG4: [ 0.57682682  0.63226437  0.69545294  0.76640834  0.84673112]
End. Best Model is model2.
Test_NDCG:
[ 0.71843574  0.71062525  0.70743234  0.70655417  0.70731135  0.708979
  0.71156148  0.71447554  0.71767363  0.72136305]
Test_NDCG By model1:
[ 0.72365708  0.71757005  0.71371418  0.71236734  0.71290943  0.71445364
  0.71704455  0.71984982  0.72288295  0.72667801]


liurui@ubuntu:~/DeepRec$ KERAS_BACKEND=theano python v11.12_pair/MLP.py --learner adam --lr 0.0001 --path Data/moviefix20/ --batch_size_random 640000
Using Theano backend.
MLP arguments: Namespace(batch_size=256, batch_size_random=640000, epochs=20, learner='adam', lr=0.0001, one_layers='[64,32,16,8]', pair_layers='[64,32,16,8]', path='Data/moviefix20/', reg_one_layers='[0,0,0,0]', reg_pair_layers='[0,0,0,0]', verbose=1) 
Load data done [164.6 s]. #user=57522, #item=8940, #train_user=12079620, #cv=287610, #test=8538097
Time: [301.8], Init: 
Init_NDCG1: [ 0.60688649  0.65895009  0.71825334  0.78286701  0.8576703 ]
Init_NDCG2: [ 0.6026025   0.65382826  0.71460157  0.78098529  0.85596164]
Init_NDCG3: [ 0.59702498  0.6500793   0.71085853  0.77798516  0.85406931]
Init_NDCG4: [ 0.59727056  0.6517122   0.71266105  0.77870424  0.8545898 ]
Iteration 0 [77.8 s]: ranku_loss = 1.174588 [298.68 s],
NDCG1: [ 0.65044987  0.69273931  0.74522984  0.80451115  0.8722704 ]
NDCG2: [ 0.62661566  0.68116077  0.73911795  0.80199091  0.86699106]
NDCG3: [ 0.59290621  0.64700311  0.70869378  0.77620944  0.85299464]
NDCG4: [ 0.61049652  0.66343639  0.72354881  0.78648941  0.85960595]
Iteration 1 [84.9 s]: ranku_loss = 0.671358 [298.15 s],
NDCG1: [ 0.75297213  0.78897488  0.83005614  0.87149666  0.91269687]
NDCG2: [ 0.75149345  0.78727612  0.82762847  0.86947589  0.91180228]
NDCG3: [ 0.58155162  0.63733478  0.70077253  0.7704552   0.84890554]
NDCG4: [ 0.6202774   0.66942679  0.72512337  0.78759543  0.86179958]
Iteration 2 [85.3 s]: ranku_loss = 0.638524 [296.92 s],
NDCG1: [ 0.75898625  0.79529095  0.83615694  0.87617478  0.91536033]
NDCG2: [ 0.75909769  0.79531874  0.83545894  0.87601487  0.9152943 ]
NDCG3: [ 0.69457845  0.73561712  0.78299946  0.83482866  0.89010205]
NDCG4: [ 0.52217725  0.58435218  0.6528512   0.7303407   0.82611684]
Iteration 3 [85.4 s]: ranku_loss = 0.631664 [296.66 s],
NDCG1: [ 0.75970186  0.79643705  0.83714294  0.87720667  0.91580658]
NDCG2: [ 0.75891332  0.79626872  0.83657592  0.87699368  0.91560777]
NDCG3: [ 0.70139166  0.73949453  0.78631997  0.83728229  0.89196332]
NDCG4: [ 0.5803283   0.63280747  0.69445942  0.76353613  0.84674529]
Iteration 4 [85.6 s]: ranku_loss = 0.623993 [296.90 s],
NDCG1: [ 0.76034223  0.79702971  0.8375142   0.87751336  0.91605608]
NDCG2: [ 0.75972505  0.79678214  0.83739489  0.87750889  0.91594067]
NDCG3: [ 0.70368201  0.74124485  0.78677993  0.83694201  0.89251136]
NDCG4: [ 0.63878966  0.68318392  0.73654593  0.79664877  0.8678982 ]
Iteration 5 [85.0 s]: ranku_loss = 0.613526 [296.28 s],
NDCG1: [ 0.75979619  0.79523174  0.83609158  0.8764444   0.9154773 ]
NDCG2: [ 0.7560349   0.79382822  0.83576174  0.87638843  0.91480725]
NDCG3: [ 0.69968838  0.7361665   0.78153162  0.83213655  0.89033278]
NDCG4: [ 0.65629402  0.69807389  0.74919561  0.80677413  0.87428852]
End. Best Model is model1.
Test_NDCG:
[ 0.7203225   0.71192332  0.70960638  0.70929635  0.71028038  0.71212147
  0.71478751  0.71774989  0.72109233  0.72486195]

